#!/usr/bin/env bash

function rollarchrootusage() {
  echo "Required defines:"
  echo "DSK USR PW HST ZONE IP2 AIP2 BOOT SWAP ROOT KM"
  echo "Optional:"
  echo "CL LA_NG USRPKGS DOTSINSTALL WLIP2 SSID PSK"
  echo ""
  echo "Functions for after arch-chroot"
  echo ""
  echo "- setup_time: \$ZONE"
  echo "- setup_locale: \$LA_NG"
  echo "- setup_keyboard: \$KM (keymap) and new \$CL(Caps_Lock) to make room for Escape"
  echo "- setup_network: with \$IP2 \$HST \$SSID \$PSK."
  echo "- setup_boot: \$ROOT, EFI boot if /sys/firmware/efi, else BIOS using grub"
  echo "- setup_user: using \$USR and \$PW, the latter also for root"
  echo "- setup_arch_proxy: if \$AIP2=yes"
  echo "- setup_dots: installs user dotfiles with the script \$DOTSINSTALL"
  echo "- setup_clean_meta: makes \$USRPKGS '-meta' package dependencies 'asexplicit'"
  echo "- setup_all: does all of the above"
  echo ""
  echo "See https://github.com/rpuntaie/rollarch[root]"
  exit 0
}

function setup_arch_proxy() {
  pacman -S --needed --noconfirm darkhttpd
  ln -s /var/lib/pacman/sync/*.db /var/cache/pacman/pkg
  cd /usr/lib/systemd/system/
  cat darkhttpd.service | sed -e "s/Webserver/ArchProxy/g" -e "s,/srv/http.*$,/var/cache/pacman/pkg --no-server-id --port 8080,g" > ArchProxy.service
  systemctl enable --now ArchProxy
}

function setup_time() {
  LOCALTIMECONF=${LOCALTIMECONF:-/etc/localtime}
  SYSTEMTIMECONF=${SYSTEMTIMECONF:-/etc/systemd/timesyncd.conf}
  for z in $(find /usr/share/zoneinfo/ -iname "*$ZONE"); do
    if [[ ! $z =~ ^.*/right/.*$ ]] && [[ ! $z =~ ^.*/posix/.*$ ]]; then
      rm -rf $LOCALTIMECONF
      ln -s "$z" $LOCALTIMECONF
      break
    fi
  done
  hwclock --systohc
  cat > $SYSTEMTIMECONF <<EOF
[Time]
NTP=0.arch.pool.ntp.org 1.arch.pool.ntp.org 2.arch.pool.ntp.org 3.arch.pool.ntp.org
FallbackNTP=0.pool.ntp.org 1.pool.ntp.org
RootDistanceMaxSec=5
PollIntervalMinSec=32
PollIntervalMaxSec=2048
EOF
  timedatectl set-ntp true
}

function setup_locale() {
  LOCALEGEN=${LOCALEGEN:-/etc/locale.gen}
  LOCALECONF=${LOCALECONF:-/etc/locale.conf}
  sed -i -r -e "s/#*(.*)/#\1/g" $LOCALEGEN
  local X=$LA_NG
  X+=" en_US"
  for x in $X
  do
    sed -i -r -e "s/^#+($x.* UTF-8)/\1/" $LOCALEGEN
  done
  locale-gen
  LC_ALL="en_US.UTF-8" locale > $LOCALECONF
}

function setup_keyboard() {
  VCONSOLECONF=${VCONSOLECONF:-/etc/vconsole.conf}
  local KBD=$(find /usr/share/kbd/keymaps/i386 -iname "$KM.map*")
  cd "${KBD%/*}"
  KBD=${KBD##*/}
  KBD=${KBD%%.*}
  cp $KBD.map.gz rollarch$KBD.map.gz
  if [[ -n $CL ]]; then
    #Win: 125 on VConsole, for X: `xmodmap -e "keysym Super_L = Caps_Lock"
    #Print: 99 on VConsole, for X: `xmodmap -e "keysym Print = Caps_Lock"
    gunzip rollarch$KBD.map.gz
    sed -i -e "s/keycode *58 *= *Caps_Lock/keycode 58 = Escape/g" rollarch$KBD.map
    echo "keycode $CL = Caps_Lock" >> rollarch$KBD.map
    echo "# modified: 58 = Escape and $CL = Caps_Lock" >> rollarch$KBD.map
    gzip rollarch$KBD.map
  fi
  loadkeys rollarch$KBD
  localectl set-keymap rollarch$KBD
  if [[ ! -f "$VCONSOLECONF" ]]; then
    echo "KEYMAP=rollarch$KBD" > $VCONSOLECONF
  fi
}

# function _nic_en_wl() {
#   NIC_EN=""
#   NIC_WL=""
#   for NIC in $(ip link show|grep " UP \| DOWN \| DORMANT" | sed "s/^[^:]: \([^:]\+\).*/\1/g"); do
#     if [[ ${NIC:0:1} == "e" ]] && [[ "$NIC_EN" == "" ]]; then
#       NIC_EN=$NIC
#     elif [[ ${NIC:0:1} == "w" ]] && [[ "$NIC_WL" == "" ]]; then
#       NIC_WL=$NIC
#     fi
#     if [[ "$NIC_EN" != "" ]] && [[ "$NIC_WL" != "" ]]; then
#       break
#     fi
#   done
# }
#
# function _nic_en_ip() {
#   nmcli con add type ethernet con-name static_en ifname $NIC_EN ip4 $IP_CIDR_EN gw4 $IP_DNS
# }
#
# function _nic_wl_ip() {
#   nmcli con add type wifi con-name static_wl ifname $NIC_WL ip4 $IP_CIDR_WL gw4 $IP_DNS ssid $SSID
#   nmcli con mod static_wl wifi-sec.key-mgmt wpa-psk wifi-sec.psk $PSK
# }
#
# function _nic_en_dhcp() {
#   nmcli con add type ethernet con-name dhcp_en ifname $NIC_EN
# }
#
# function _nic_wl_dhcp() {
#   nmcli con add type wifi con-name static_wl ifname $NIC_WL ssid $SSID
#   nmcli con mod static_wl wifi-sec.key-mgmt wpa-psk wifi-sec.psk $PSK
# }
#
# function _nic_bonding_ip() {
#   nmcli con add type bond ifname mybond0
#   nmcli con add type ethernet ifname $NIC_EN master mybond0 ip4 $IP_CIDR_EN gw4 $IP_DNS
#   if [[ -n "$IP_CIDR_WL" ]]; then
#     nmcli con add type wifi ifname $NIC_WL master mybond0 ip4 $IP_CIDR_WL gw4 $IP_DNS
#   else
#     nmcli con add type wifi ifname $NIC_WL master mybond0
#   fi
# }
#
# function _nic_bonding_dhcp() {
#   nmcli con add type bond ifname mybond0
#   nmcli con add type ethernet ifname $NIC_EN master mybond0
#   nmcli con add type wifi ifname $NIC_WL master mybond0
# }

function setup_ip() {
#  _nic_en_wl
#  if [[ "$IP2" != "dhcp" ]]; then
#    local IP_2=${IP2##*.}
#    local IP_1=${IP2%$IP_2}
#    IP_DNS=192.168.${IP_1}1
#    IP_CIDR_EN="192.168.$IP2/24"
#    if [[ -n $WLIP2 ]] && [[ "$WLIP2" != "dhcp" ]] ; then
#      IP_CIDR_WL="192.168.$WLIP2/24"
#      _nic_bonding_ip
#    else
#      IP_CIDR_WL=$IP_CIDR_EN
#      if [[ "$NIC_EN" != "" ]] && [[ "$NIC_WL" != "" ]] && [[ "$WLIP2" == "dhcp" ]] ; then
#        IP_CIDR_WL=
#        _nic_bonding_ip
#      elif [[ "$NIC_EN" != "" ]]; then
#        _nic_en_ip
#      elif [[ "$NIC_WL" != "" ]]; then
#        _nic_wl_ip
#      fi
#    fi
#  else
#    IP_DNS=$(ip route show default | sed -n -e "s/default via \([0-9.]*\).*/\1/p")
#    if [[ "$NIC_EN" != "" ]] && [[ "$NIC_WL" != "" ]]; then
#      _nic_bonding_dhcp
#    elif [[ "$NIC_EN" != "" ]]; then
#      _nic_en_dhcp
#    elif [[ "$NIC_WL" != "" ]]; then
#      _nic_wl_dhcp
#    fi
#  fi
  systemctl enable --now NetworkManager
}

# samba: add user share:
# net usershare add cifs_share /home/$USR/path_to_cifs_share
# nfs: edit /etc/exports
function setup_smb_ssh_nfs() {
  ETCSAMBASMB=${ETCSAMBASMB:-/etc/samba/smb.conf}
  VARLIBSAMBAUSERSHARES=${VARLIBSAMBAUSERSHARES:-/var/lib/samba/usershares}
  LOADMODULECIFS=${LOADMODULECIFS:-/etc/modules-load.d/cifs.conf}
  echo "cifs" > $LOADMODULECIFS
  cat > $ETCSAMBASMB <<EOF
[global]
   usershare path = /var/lib/samba/usershares
   usershare max shares = 100
   usershare allow guests = yes
   usershare owner only = yes

EOF
  curl -Ls https://raw.githubusercontent.com/samba-team/samba/master/examples/smb.conf.default | sed \
    -e "s,log file = .*$,logging = systemd,g" -e "s,MYGROUP,WORKGROUP,g" -e "s/\[global\]//g" >> $ETCSAMBASMB
  mkdir -p $VARLIBSAMBAUSERSHARES
  groupadd -rf sambashare
  chown root:sambashare $VARLIBSAMBAUSERSHARES
  chmod 1770 $VARLIBSAMBAUSERSHARES
  systemctl enable --now smb nmb
  systemctl enable --now sshd
  systemctl enable --now nfs-server
}

#IP2=1.107 WLIP2=1.117 SSID="YOURSSID" PSK="YOURPASSPHRASE"
function setup_network() {
  ETCHOSTS=${ETCHOSTS:-/etc/hosts}
  ETCHOSTNAME=${ETCHOSTNAME:-/etc/hostname}
  echo $HST > $ETCHOSTNAME
  cat > $ETCHOSTS <<EOF
127.0.0.1     localhost
::1           localhost
127.0.0.1     $HST.localdomain  $HST
EOF
  setup_ip
  setup_smb_ssh_nfs
}

function setup_boot() {
  EFI=${EFI:-$(test -e /sys/firmware/efi && echo on || echo off)}
  LOADERENTRY=${LOADERENTRY:-/boot/loader/entries/arch.conf}
  #microcode used by systemd-boot as well as grub (automatically)
  UCODE=''
  if [[ "$(cat /proc/cpuinfo | grep GenuineIntel)" != "" ]]; then
    UCODE='intel-ucode'
  elif [[ "$(cat /proc/cpuinfo | grep AuthenticAMD)" != "" ]]; then
    UCODE='amd-ucode'
  fi
  if [[ "$UCODE" != "" ]]; then
    UCODE_STRING="initrd  /${UCODE}.img
"
    pacman -S --needed --noconfirm $UCODE
  fi
  if [[ "$EFI" == "on" ]]; then
    HOOKS='base systemd autodetect modconf block sd-lvm2 filesystems keyboard sd-vconsole fsck'
    pacman -S --needed --noconfirm efibootmgr efitools
    UUID="$(blkid -s UUID -o value $ROOT)"
    APPEND="options root=UUID=${UUID} rw quiet splash loglevel=0 console=tty2"
    LOADERENTRYDIR=${LOADERENTRY%/*}
    mkdir -p $LOADERENTRYDIR
    echo "title   arch
linux   /vmlinuz-linux
${UCODE_STRING}initrd  /initramfs-linux.img
${APPEND}" > $LOADERENTRY
    echo "title   fallback arch
linux   /vmlinuz-linux
${UCODE_STRING}initrd  /initramfs-linux-fallback.img
${APPEND}" > ${LOADERENTRY/arch/fallback}
    cat > ${LOADERENTRYDIR%/*}/loader.conf <<EOF
timeout 1
default arch
EOF
    bootctl install
  else
    HOOKS='base udev autodetect modconf block lvm2 filesystems keyboard fsck'
    grub-install --target=i386-pc --recheck $DSK
    grub-mkconfig -o "/boot/grub/grub.cfg"
  fi
  sed -i -e "s/^HOOKS=.*/HOOKS=($HOOKS)/g" /etc/mkinitcpio.conf
  mkinitcpio -p linux
}

function setup_user() {
  groupadd -rf sambashare
  groupadd -rf plugdev
  groupadd -rf docker
  useradd -m -g users -G wheel,uucp,storage,power,video,audio,lp,games,scanner,plugdev,lock,sambashare,docker -s /usr/bin/bash $USR
  echo -e "$PW
$PW" | passwd
  echo -e "$PW
$PW" | passwd $USR
  echo -e "$PW
$PW" | smbpasswd -a $USR
  sed -i -e "s/^# *\(%wheel ALL=(ALL) ALL\)/\1/" /etc/sudoers
  if [[ -e /usr/bin/zsh ]]; then
    chsh -s /usr/bin/zsh $USR
  fi
}

function setup_dots() {
  if [[ -e $DOTSINSTALL ]]; then
    cd "/home/$USR"
    sudo -H -u $USR bash $DOTSINSTALL
  fi
}

#make dependencies of meta packages explicit
function setup_clean_meta() {
  if [[ -n $USRPKGS ]]; then
    for m in $USRPKGS; do
      if [[ "$m" =~ .*-meta ]]; then
        pacman -D $(LANG=C pacman -Si $m |sed -n '/Depends\ On/,/:/p'|sed '$d'|cut -d: -f2 |tr -d '>=[0-9]') --asexplicit
        pacman -R --noconfirm $m
      fi
    done
  fi
}

function setup_all() {
  setup_time
  setup_locale
  setup_keyboard
  setup_network
  setup_boot

  if [[ -z "$PW" ]]; then
    read -s -p "Passport:" PW
    echo
    read -s -p "Repeat passport:" PW1
    echo
  fi
  if [[ -n "$PW" ]]; then
    setup_user
  fi

  if [[ $AIP2 == "yes" ]]; then
    setup_arch_proxy
  fi

  # printing
  systemctl enable --now org.cups.cupsd

  setup_dots
  setup_clean_meta

  systemctl enable --now gdm
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then

  if [[ $1 == "--help" ]] || [[ $1 == "-h" ]]; then
    rollarchrootusage
  fi

  for req in DSK USR PW HST ZONE IP2 AIP2 BOOT SWAP ROOT KM
  do
    if [[ "${!req}" == "" ]]; then
      echo "${req} missing!" >&2
      exit 1
    fi
  done

  setup_all
  exit 0
fi

