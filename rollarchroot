#!/usr/bin/env bash

rollarchrootusage(){
  echo "Required defines:"
  echo "DSK USR PW HST LA_NG ZONE IP2 AIP2 BOOT SWAP ROOT UEFI"
  echo ""
  echo "Functions for after arch-chroot"
  echo ""
  echo "- setup_time: using $ZONE"
  echo "- setup_locale: using $LA_NG"
  echo "- setup_escape: Caps_Lock becomes Escape"
  echo "- setup_network: with $IP2 and $HST; uses systemd-networkd"
  echo "- setup_boot: EFI boot if /sys/firmware/efi, else BIOS using grub"
  echo "- setup_user: using $USR and $PW, the latter also for root"
  echo "- setup_arch_proxy if AIP2=yes"
  echo "- setup_all does all of the above"
  echo ""
  echo "See https://github.com/rpuntaie/rollarch[root]"
  exit 0
}

if [[ $1 = "--help" ]] || [[ $1 = "-h" ]]; then
  rollarchrootusage
fi

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    for req in DSK USR PW HST LA_NG ZONE IP2 AIP2 BOOT SWAP ROOT UEFI
    do
      if [ "${!req}" = "" ]
      then
        echo "Fatal: ${req} missing!" >&2
        exit 1
      fi
    done
fi

setup_arch_proxy() {
  pacman -S --needed --noconfirm darkhttpd &>/dev/null
  ln -s /var/lib/pacman/sync/*.db /var/cache/pacman/pkg
  cd /usr/lib/systemd/system/
  cat darkhttpd.service | sed -e "s/Webserver/ArchProxy/g" -e "s,/srv/http.*$,/var/cache/pacman/pkg --no-server-id --port 8080,g" > ArchProxy.service
  systemctl enable ArchProxy
}

setup_time(){
  for z in $(find /usr/share/zoneinfo/ -iname "*$ZONE"); do
    if [[ ! $z =~ ^.*/right/.*$ ]] && [[ ! $z =~ ^.*/posix/.*$ ]]
    then
      rm -rf /etc/localtime
      ln -s "$z" /etc/localtime
      break
    fi
  done
  hwclock --systohc
  cat > /etc/systemd/timesyncd.conf <<EOF
[Time]
NTP=0.arch.pool.ntp.org 1.arch.pool.ntp.org 2.arch.pool.ntp.org 3.arch.pool.ntp.org
FallbackNTP=0.pool.ntp.org 1.pool.ntp.org
RootDistanceMaxSec=5
PollIntervalMinSec=32
PollIntervalMaxSec=2048
EOF
  timedatectl set-ntp true
}

setup_locale(){
  if [[ ! -e /etc/locale.gen ]]; then
    if [ "$LA_NG" != "" ]
    then
      cat /etc/locale.gen | grep -E "#${LA_NG}.* UTF-8" | sed -r "s/^#(.*)/\1/" > /etc/locale.tmp
    fi
    echo 'en_US.UTF-8 UTF-8' >> /etc/locale.tmp
    mv /etc/locale.tmp /etc/locale.gen
    locale-gen
    locale > /etc/locale.conf
  fi
}

setup_escape(){
  if [[ ! -e  /etc/vconsole.conf ]]; then
    # change: keycode  58 = Escape
    local KBD=$(find /usr/share/kbd/keymaps/ -iname "us.map.gz")
    cd "${KBD%/*}"
    KBD=${KBD##*/}
    cp $KBD rollarch$KBD.map.gz
    gunzip rollarch$KBD.map.gz
    sed -ie "s/keycode *58 *= *Caps_Lock/keycode 58 = Escape/g" rollarch$KBD.map
    gzip rollarch$KBD.map
    cd -
    loadkeys rollarch$KBD
    cat > /etc/vconsole.conf <<EOF
KEYMAP=rollarch$KBD
FONT=lat9w-16
FONT_MAP=8859-1_to_uni
EOF
  fi
}

#for VirtualBox use bridged to have access to LAN
setup_network(){
  echo $HST > /etc/hostname
  cat > /etc/hosts <<EOF
127.0.0.1     localhost
::1           localhost
127.0.0.1     $HST.localdomain  $HST
EOF
  if [ "$IP2" != "dhcp" ]; then
    #IP2="1.100"
    local IPE=${IP2##*.} #100
    local IPB=${IP2%$IPE} #1.
    local NS=192.168.${IPB}1
    local CIDR="192.168.$IP2/24"
    ## #systemd-resolved instead of
    ## echo "nameserver $NS" > /etc/resolv.conf
    sed -i -e "s/#DNS=.*$/DNS=$NS/g" -e "s/#FallbackDNS/FallbackDNS/g" -e "s/#LLMNR/LLMNR/g" -e "s/#Multi/Multi/g" /etc/systemd/resolved.conf
  fi
  for NIC in $(ip link show|grep " UP \| DOWN "|sed "s/^[^:]: \([^:]\+\).*/\1/g"); do
    if [ ${NIC:0:1} = "e" ] && [ "$had_e" = "" ]; then
      local had_e="yes"
      if [ "$IP2" != "dhcp" ]; then
        cat > /etc/systemd/system/network.service <<EOF
[Unit]
Description=Network Connectivity
Wants=network.target
Before=network.target
BindTo=sys-subsystem-net-devices-$NIC.device
After=sys-subsystem-net-devices-$NIC.device

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/bin/ip link set dev $NIC up
ExecStart=/usr/bin/ip addr add $CIDR dev $NIC
ExecStart=/usr/bin/ip route add default via $NS
ExecStop=/usr/bin/ip addr flush dev $NIC
ExecStop=/usr/bin/ip link set dev $NIC down

[Install]
WantedBy=multi-user.target
EOF
        cat > /etc/systemd/network/20-wired.network <<EOF
[Match]
Name=$NIC

[Network]
Address=$CIDR
Gateway=$NS
DNS=$NS
LLMNR=yes
MulticastDNS=yes

[Route]
Metric=10
EOF
      else
        cat > /etc/systemd/network/20-wired.network <<EOF
[Match]
Name=$NIC

[Network]
DHCP=ipv4
LLMNR=yes
MulticastDNS=yes

[DHCP]
RouteMetric=10
EOF
      fi
    elif [ ${NIC:0:1} = "w" ] && [ "$had_w" = "" ]; then
      local had_w="yes"
      if [ "$IP2" != "dhcp" ]; then
        cat > /etc/systemd/network/25-wireless.network <<EOF
[Match]
Name=$NIC

[Network]
Address=$CIDR
Gateway=$NS
DNS=$NS
LLMNR=yes
MulticastDNS=yes

[Route]
Metric=20
EOF
      else
        cat > /etc/systemd/network/25-wireless.network <<EOF
[Match]
Name=$NIC

[Network]
DHCP=ipv4
LLMNR=yes
MulticastDNS=yes

[DHCP]
RouteMetric=20
EOF
      fi
    fi
  done
  systemctl enable systemd-networkd &>/dev/null
  systemctl enable systemd-resolved &>/dev/null
  #edit /etc/exports to nfs export folders
  systemctl enable nfs-server.service &>/dev/null
  ## samba
  cat > /etc/samba/smb.conf <<EOF
[global]
   usershare path = /var/lib/samba/usershares
   usershare max shares = 100
   usershare allow guests = yes
   usershare owner only = yes

EOF
  curl -Ls https://raw.githubusercontent.com/samba-team/samba/master/examples/smb.conf.default|sed \
    -e "s,log file = .*$,logging = systemd,g" -e "s,MYGROUP,WORKGROUP,g" -e "s/\[global\]//g" >> /etc/samba/smb.conf
  mkdir -p /var/lib/samba/usershares
  groupadd -r sambashare &>dev/null
  chown root:sambashare /var/lib/samba/usershares
  chmod 1770 /var/lib/samba/usershares
  systemctl enable smb nmb &>/dev/null
}

setup_boot(){
  UCODE=''
  UCODE_STRING=''
  if [ "$(cat /proc/cpuinfo | grep GenuineIntel)" != "" ]; then
    UCODE='intel-ucode'
  elif [ "$(cat /proc/cpuinfo | grep AuthenticAMD)" != "" ]; then
    UCODE='amd-ucode'
  fi
  if [ "$UCODE" != "" ]; then
    UCODE_STRING="initrd  /${UCODE}.img
"
    pacman -S --needed --noconfirm $UCODE &>/dev/null
  fi
  if [ "$UEFI" = "on" ]; then
    pacman -S --needed --noconfirm efibootmgr efitools &>/dev/null
    bootctl --path=/boot install
    PARTUUID="$(blkid -s PARTUUID -o value $ROOT)"
    APPEND="options root=PARTUUID=${PARTUUID} rw quiet splash loglevel=0 console=tty2"
    echo "title   ${HST}
linux   /vmlinuz-linux
${UCODE_STRING}initrd  /initramfs-linux.img
${APPEND}" > /boot/loader/entries/arch.conf
  else
    mkinitcpio -p linux
    grub-install --target=i386-pc --recheck $DSK &>/dev/null
    grub-mkconfig -o "/boot/grub/grub.cfg" &>/dev/null
  fi
  echo "cifs" > /etc/modules-load.d/cifs.conf
}

setup_user(){
  sed -i -e "s/^# *\(%wheel ALL=(ALL) ALL\)/\1/" /etc/sudoers
  echo -e "$PW
$PW" | passwd
  useradd -m -g users -G wheel,uucp,storage,power,video,audio,lp,games,scanner -s /usr/bin/zsh $USR &>/dev/null
  chsh -s /usr/bin/zsh
  echo -e "$PW
$PW" | passwd $USR
  echo -e "$PW
$PW" | smbpasswd -a $USR
  gpasswd sambashare -a $USR
}

setup_all(){
  setup_time
  setup_locale
  setup_escape
  setup_network
  setup_boot

  if [[ -z "$PW" ]]; then
    PW=$(dialog --stdout --passwordbox "Enter password for $USR and root" 0 0) || exit 1
  fi
  if [[ -n "$PW" ]]; then
    setup_user
  fi

  if [[ $AIP2 = "yes" ]]; then
    setup_arch_proxy
  fi

  if [[ -z $(grep -q "^flags.*\ hypervisor\ " /proc/cpuinfo) ]]; then
    systemctl enable vboxservice
    #in .xinitrc: VBoxClient-all && exec xmonad
  fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]
then
  setup_all
  exit 0
fi
