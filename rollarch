#!/usr/bin/env bash

: '
manual tests to perform on virtualbox:
DSK=/dev/sda USR=roland PW=p HST=u121 IP2=1.121 AIP2=1.108 ZONE=Vienna ./rollarch
DSK=/dev/sda USR=roland HST=u121 IP2=1.121 AIP2=1.108 ZONE=Vienna DOTS=fjVcp ./rollarch
DSK=/dev/sda LVM=/dev/sdb USR=roland HST=u121 IP2=1.121 AIP2=1.108 ZONE=Vienna ./rollarch
'

ROLLARCH_VERSION='0.0.5'
ROLLARCH_BASE='arch-install-scripts systemd-resolvconf base base-devel linux linux-firmware mkinitcpio lvm2 devtools dialog wpa_supplicant ntp nfs-utils samba sudo git python vim zsh netctl'
# other packages used below:
# pacman -Si darkhttpd
# pacman -Si intel-ucode
# pacman -Si amd-ucode
# pacman -Si efibootmgr
# pacman -Si efitools

function rollarch_usage() 
{
  echo "${0##*/} v${ROLLARCH_VERSION}"
  echo
  echo "This file is from:"
  echo "  https://raw.githubusercontent.com/rpuntaie/rollarch/master/rollarch"
  echo "  https://git.io/installarch"
  echo
  echo "rollarch or installarch, i.e. \${0}, becomes /rollarchroot used for setup after arch-chroot"
  echo
  echo "See:"
  echo "https://github.com/rpuntaie/rollarch/rollarch"
  echo
  echo "Call as root to install Arch Linux:"
  echo "  curl -OLs https://git.io/installarch #inspect, modify, ..."
  echo "  DSK=/dev/sda USR=A PW=B HST=C IP2=1.106 ZONE=Berlin bash installarch"
  echo
  echo "All parameters following 'installarch' are Arch or custom packages."
  echo "Default: $ROLLARCH_BASE"
  echo
  echo "If the custom repo's name is 'custom',"
  echo "'AIP2=x.y' for 192.168.x.y is the only additional parameter needed.".
  echo "'AIP2=yes' sets up an ArchProxy server on port 8237 instead of using one."
  echo
  echo "Required: values are exampes"
  echo "# DSK=/dev/sda"
  echo "# USR=u"
  echo "# PW=p"
  echo "# HST=u121"
  echo "# ZONE=Vienna"
  echo
  echo "Optional:"
  echo "  SWAP [on|off] (on), set to 'off' e.g. for SSD and if you don't need swap"
  echo "  LVM [e.g. /dev/sdb], disks additional to $ROOT to form new LVM $ROOT /dev/vg0/lv0"
  echo "  IP2 [e.g. 1.106] for 192.168.1.106, else 'dhcp'"
  echo "  AIP2 [e.g. 1.199 | yes, to create Arch Proxy] (none)"
  echo "  DOTS: URL or https://git.io/SHORT to a bash installation script for dot files"
  echo "  LA_NG in addition to en_US [e.g. de_DE] (none)"
  echo "  KM: (us) one of 'localectl list-keymaps'."
  echo "      If in upper case: ESCAPE->CAPS_LOCK and CAPS_LOCK->WIN"
  echo "  CL: (99) New key for Caps_Lock making room for Escape in vconsole (for X use xmodmap)."
  echo "  WLIP2: separate wl NIC IP in addition to static IP2, else bonding en+wl with IP2 (not for netctl)"
  echo "  SSID: wlan access point, if any"
  echo "  PSK: passphrase for wlan, if any"
  echo
  echo "Desription:"
  echo "  - check parameters and access to internet"
  echo "  - create and mount partitions"
  echo "  - check 'custom' at 192.168.$AIP2"
  echo "  - pacstrap"
  echo "  - arch-chroot using rollarchroot script (which is the same as rollarch or installarch)"
  echo
}

function _rollarch_example_params() {
  DSK=/dev/sda
  USR=u
  PW=p
  HST=u121
  ZONE=Vienna
  AIP2=1.106
  DOTS=fjVcp
}

function _rollarchroot_example_params() {
  _rollarch_example_params
  BOOT=/dev/sda1
  SWAP=/dev/sda2
  ROOT=/dev/sda3
  KM=us
  CL=99
  LA_NG=ru_RU
  DOTSINSTALL="/LfjVcp"
}

function rollarchrootusage() {
  echo "Required defines:"
  echo "DSK USR PW HST ZONE IP2 AIP2 BOOT SWAP ROOT"
  echo "Optional:"
  echo "KM CL LA_NG USRPKGS DOTSINSTALL WLIP2 SSID PSK"
  echo ""
  echo "Functions for after arch-chroot"
  echo ""
  echo "- setup_time: \$ZONE"
  echo "- setup_locale: \$LA_NG"
  echo "- setup_keyboard: \$KM (keymap) and new \$CL(Caps_Lock) to make room for Escape"
  echo "- setup_network: with \$IP2 \$HST \$SSID \$PSK. Enables systemd-networkd, but netctl files are created, too"
  echo "- setup_boot: \$ROOT, EFI boot if /sys/firmware/efi, else BIOS using grub"
  echo "- setup_user: using \$USR and \$PW, the latter also for root"
  echo "- setup_arch_proxy: if \$AIP2=yes"
  echo "- setup_dots: installs user dotfiles with the script \$DOTSINSTALL"
  echo "- setup_clean_meta: makes \$USRPKGS '-meta' package dependencies 'asexplicit'"
  echo "- setup_all: does all of the above"
  echo ""
  echo "See https://github.com/rpuntaie/rollarch"
  exit 0
}

function rollarch_check_internet() {
  ping -c 1 -W 1 8.8.8.8 &>/dev/null
  if [[ $? != 0 ]]; then
    echo 'Fatal: Internet not available. Fix first.' >&2
    return 1
  fi

  if [[ "$(which ntpdate &> /dev/null)" != "" ]]; then
    ntpdate pool.ntp.org &>/dev/null
    timedatectl set-local-rtc 1 &>/dev/null
  fi
}

MNT_PNT=${MNT_PNT:-/mnt}

function rollarch_check_defines() {
  while [[ -z $PW ]]; do
    read -s -p "Password:" PW
    echo
    read -s -p "Repeat password:" PW1
    echo
    if [[ "$PW1" == "$PW" ]]; then
      break
    fi
  done
  for req in DSK USR PW HST ZONE
  do
    if [[ "${!req}" == "" ]]; then
      echo "Fatal: ${req} missing!" >&2
      return 1
    fi
  done

  if [[ ! -e $DSK ]]; then
    echo 'Fatal: DSK wrong' >&2
    return 1
  fi

  if [[ "$USR" == "root" ]] || [[ "$(echo $USR | sed -e 's/[a-z]//g')" != "" ]]; then
    echo 'Fatal: USR wrong' >&2
    return 1
  fi

  if [[ $(find /usr/share/zoneinfo -iname "*$ZONE" | wc -l) == 0 ]]; then
    echo 'Fatal: ZONE wrong' >&2
    return 1
  fi

  if [[ "$LA_NG" != "" ]]; then
    for la_ng in $LA_NG
    do
      if [[ "$la_ng" == "en_US" ]] || [[ ! "$la_ng" =~ ^([a-z][a-z]_[A-Z][A-Z])$ ]]; then
        echo 'additional LA_NG wrong' >&2
        return 1
      fi
    done
  fi

}

function roll_find_partitions() {
  if [[ "$DSK" == "" ]]; then
    echo 'DSK not defined' >&2
    return 1
  fi
  BOOT=
  ROOT=
  SWP=
  for diskpart in $(ls ${DSK}*); do
    if [[ "$diskpart" =~ ^([a-z/]+([0-9]n)?[0-9]p|[a-z/]+)[0-9]$ ]]; then
      if [[ "$BOOT" == "" ]]; then
        BOOT=$diskpart
      elif [[ "$SWP" == "" ]]; then
        if [[ "$SWAP" == "off" ]]; then
          ROOT=$diskpart
          SWP=off
        else
          SWP=$diskpart
        fi
      elif [[ "$ROOT" == "" ]]; then
        ROOT=$diskpart
      fi
    fi
  done
  SWAP=$SWP
  if [[ "$ROOT" == "" ]]; then
    echo 'unable to find ROOT the partition' >&2
    return 1
  fi
  if [[ "$BOOT" == "" ]]; then
    echo 'unable to find BOOT the partition' >&2
    return 1
  fi
  if [[ -e /dev/vg0/lv0 ]]; then
    ROOT=/dev/vg0/lv0
  fi
}

function roll_mkfs() {
  EFI=${EFI:-$(test -e /sys/firmware/efi && echo on || echo off)}
  if [[ "$SWAP" != "off" ]] && [[ "$SWAP" != "on" ]] && [[ "$SWAP" != "" ]]; then
    yes y | mkswap $SWAP
    swapon $SWAP
  fi
  mkfs -t ext4 -F $ROOT
  yes y | tune2fs -U $(cat /proc/sys/kernel/random/uuid) $ROOT
  if [[ "$EFI" == "off" ]]; then
    mkfs -t ext2 -F $BOOT
  else
    mkfs -t vfat $BOOT
  fi
}

function _rollarch_chroot() {
  DSK=/dev/sda
  roll_find_partitions
  roll_mount
  arch-chroot /mnt
  : '
  . ./rollarchrootparams
  . ./rollarchroot
  '
}

function roll_mount() {
  mount $ROOT $MNT_PNT
  mkdir -p $MNT_PNT/boot
  mount $BOOT $MNT_PNT/boot
}

function roll_umount() {
  umount $MNT_PNT/boot
  umount $MNT_PNT
}

function rollarch_partition() {
  EFI=${EFI:-$(test -e /sys/firmware/efi && echo on || echo off)}
  roll_umount &>/dev/null
  swapoff $(fdisk -l $DSK 2> /dev/null | sed -n -e "s/ [0-9\. GMT]* 82 .*//p") &>/dev/null
  swapoff $(fdisk -l $DSK 2> /dev/null | sed -n -e "s/ [0-9\. GMT]*.*wap//p") &>/dev/null
  lvremove --yes vg0 lv0 &>/dev/null
  vgremove --yes vg0 &>/dev/null
  for apv in $(pvscan -s | grep /dev/ | sed -n -e "s/ //gp"); do
    pvremove --yes $apv &>/dev/null
  done
  umount ${DSK}* &> /dev/null
  dd if=/dev/zero of=$DSK bs=1 count=2048 &>/dev/null
  diskstart=2048s
  diskpart=
  if [[ "$EFI" == "off" ]]; then
    GRUB="grub"
    parted --script $DSK mklabel msdos
  else
    parted --script $DSK mklabel gpt
  fi
  parted --script --align optimal $DSK mkpart primary fat16 $diskstart 192MiB
  parted $DSK set 1 boot on
  diskstart=192MiB
  if [[ "$SWAP" == "off" ]]; then
    parted --script --align optimal $DSK mkpart primary ext4 $diskstart 100%
    swapsize=0
  else
    swapsize=$(cat /proc/meminfo | grep MemTotal | sed "s/[^:]*: *\(.*\) kB/\1000/g")
    ((swapsize=swapsize+2**30))
    swapsize=$(numfmt --to=si $swapsize)
    parted --script --align optimal $DSK mkpart primary linux-swap $diskstart $swapsize
    parted --script --align optimal $DSK mkpart primary ext4 $swapsize 100%
  fi
  roll_find_partitions
  [[ $?==0 ]] || return 1

  if [[ "$LVM" != "" ]]; then
    parted $DSK set ${ROOT#$DSK} lvm on &>/dev/null
    pvcreate --yes $ROOT &>/dev/null
    for apv in $LVM; do
      dd if=/dev/zero of=$apv bs=1 count=2048 &>/dev/null
      parted --script --align optimal $apv mklabel msdos mkpart primary ext4 0% 100% &>/dev/null
      parted $apv set 1 lvm on &>/dev/null
      pvcreate --yes ${apv}1 &>/dev/null
    done
    lvmpvs=$(pvdisplay | sed -n -e "s/ *PV Name *//p")
    vgcreate --yes vg0 $lvmpvs &>/dev/null
    lvcreate --yes -l 100%VG vg0 -n lv0 &>/dev/null
    ROOT=/dev/vg0/lv0
  fi

  roll_find_partitions
  [[ $?==0 ]] || return 1
  echo "  boot: $BOOT"
  echo "  swap: $SWAP"
  echo "  root: $ROOT"

  roll_mkfs &>/dev/null
  roll_mount
}

#"key-ID: No" from https://wiki.archlinux.org/index.php/Unofficial_user_repositories
rollarch_additional_repo_names_possible="
[arcanisrepo]
Server = https://repo.arcanis.me/repo/\$arch
[dvzrv]
Server = https://pkgbuild.com/~dvzrv/repo/\$arch
[eschwartz]
Server = https://pkgbuild.com/~eschwartz/repo/\$arch
[herecura]
Server = https://repo.herecura.be/\$repo/\$arch
[quarry]
Server = https://pkgbuild.com/~anatolik/quarry/x86_64/
[blackeagle-pre-community]
Server = https://repo.herecura.be/\$repo/\$arch
[seblu]
Server = https://al.seblu.net/\$repo/\$arch
[xyne-x86_64]
Server = https://xyne.archlinux.ca/repos/xyne
"

##repos tested in test_rollarch.bats
##here using py
#srvrs= {'arcanisrepo':'https://repo.arcanis.me/repo/x86_64',
#'dvzrv':'https://pkgbuild.com/~dvzrv/repo/x86_64',
#'eschwartz':'https://pkgbuild.com/~eschwartz/repo/x86_64',
#'herecura':'https://repo.herecura.be/herecura/x86_64',
#'quarry':'https://pkgbuild.com/~anatolik/quarry/x86_64/',
#'blackeagle-pre-community':'https://repo.herecura.be/blackeagle-pre-community/x86_64',
#'city':'https://pkgbuild.com/~bgyorgy/city/os/x86_64',
#'ffy00':'https://pkgbuild.com/~ffy00/repo',
#'maximbaz':'https://pkgbuild.com/~maximbaz/repo/',
#'seblu':'https://al.seblu.net/seblu/x86_64',
#'sergej-repo':'http://www.p5n.pp.ru/sergej-repo/os/x86_64',
#'xyne':'https://xyne.archlinux.ca/repos/xyne'}
#import urllib
#for nm,srv in srvrs.items():
#  assert b"pkg.tar.zst" in urllib.request.urlopen(srv).read(), nm+' failed'


function rollarch_repos() {
  #custom AIP2 and unofficial repo names from Unofficial_user_repositories to pacman.conf and mirrorlist
  PACMANCONF=${PACMANCONF:-/etc/pacman.conf}
  if [[ "$DOTS" != "" ]]; then
    if [[ "$DOTS" =~ ^https:// ]] || [[ "$DOTS" =~ ^file:/// ]]; then
      DOTS_LOCAL=L${DOTS##*/}
      curl -Ls $DOTS -o $DOTS_LOCAL
    elif [[ ! -f $DOTS ]]; then
      DOTS_LOCAL=L$DOTS
      curl -Ls https://git.io/$DOTS -o $DOTS_LOCAL
    else
      DOTS_LOCAL=L${DOTS##*/}
      cp $DOTS $DOTS_LOCAL
    fi
    if [[ -f $DOTS_LOCAL ]]; then
      eval $(sed -n -e "s/^#DFN: *//p" $DOTS_LOCAL)
      USRPKGS=$(sed -n -e "s/^#PKG: *//p" $DOTS_LOCAL)
      USRREPOS=$(sed -n -e "s/^#REPO: *//p" $DOTS_LOCAL)
    fi
  fi

  if [[ "$AIP2" == "" ]]; then
    AIP2="no"
  elif [[ ! "$AIP2" =~ ^([0-9]+[.][0-9]+)$ ]] && [[ "$AIP2" != "no" ]]; then
    AIP2="yes"
  fi
  ROLLARCH_MIRRORLIST=${ROLLARCH_MIRRORLIST:-/etc/pacman.d/mirrorlist}
  MIRRORLISTPREV="$ROLLARCH_MIRRORLIST$(date +%s)"
  mv $ROLLARCH_MIRRORLIST $MIRRORLISTPREV
  touch $ROLLARCH_MIRRORLIST
  if [[ "$AIP2" != "no" ]] && [[ "$AIP2" != "yes" ]]; then
    USRREPOS+=" http://192.168.$AIP2:8237"
  fi
  for arepo in $USRREPOS; do
    if [[ ! $arepo =~ ^http ]]; then #name from Unofficial_user_repositories
      #arepoconf=$(curl -Ls https://wiki.archlinux.org/index.php/Unofficial_user_repositories | sed -n "/<pre>\[$arepo\]/{N;s/<pre>//p}")
      arepoconf=$(echo "$rollarch_additional_repo_names_possible" | sed -n -e "/^\[$arepo\]/{N;p}")
      #no areposrv, because not wanted in mirrorlist
      areposrv=""
      #areposrv=${arepoconf/\[$arepo\]/}
      #areposrv=${areposrv//[[:space:]]/} #Server = https:...
    else
      areposrv="Server = $arepo"
      if [[ -n $(curl -s "$arepo" | grep "custom\.db") ]]; then
        arepoconf="[custom]
SigLevel = Never
$areposrv"
      else
        arepoconf=""
        echo "EE: custom.db not served by $arepo"
      fi
    fi
    if  [[ -n $areposrv ]] && [[ ! $(head $MIRRORLISTPREV | grep "$areposrv") ]]; then
      echo "$areposrv" >> $ROLLARCH_MIRRORLIST
    fi
    if [[ -n $arepoconf ]] && [[ ! $(tail $PACMANCONF | grep "$arepo") ]]; then
         echo "$arepoconf" >> $PACMANCONF
    fi
  done
  cat $MIRRORLISTPREV >> $ROLLARCH_MIRRORLIST
}


function rollarch_packstrap() {
  PACMANCONF=${PACMANCONF:-/etc/pacman.conf}

  pacman -Sy
  if [[ "$@" != "" ]]; then
    USRPKGS="$USRPKGS $@"
    pacstrap $MNT_PNT $GRUB $USRPKGS
  else
    pacstrap $MNT_PNT $GRUB $ROLLARCH_BASE $USRPKGS
  fi

  mkdir -p $MNT_PNT/etc
  genfstab -t PARTUUID $MNT_PNT >> $MNT_PNT/etc/fstab
  cat $PACMANCONF | sed "s/#\(CheckSpace\)/\1/" > $MNT_PNT$PACMANCONF
}


function rollarch_chroot() {
  if [[ ! "$IP2" =~ ^([0-9]+[.][0-9]+)$ ]]; then
    IP2="dhcp"
  fi

  if [[ "$KM" == "" ]]; then
    KM="us"
  fi

  if [[ ! -f $MNT_PNT/rollarchroot ]]; then
    cp ${0} $MNT_PNT/rollarchroot
    chmod a+x $MNT_PNT/rollarchroot
  fi

  if [[ ! -e $MNT_PNT/usr/bin/bash ]]; then
    echo 'Fatal: pacstrap failed.' >&2
    return 1
  fi

  if [[ "$DOTS_LOCAL" != "" ]]; then
    cp $DOTS_LOCAL $MNT_PNT
    DOTSINSTALL="/$DOTS_LOCAL"
  else
    DOTSINSTALL=
  fi

  cat > $MNT_PNT/rollarchrootparams <<EOF
DSK=$DSK
USR=$USR
HST=$HST
ZONE=$ZONE
IP2=$IP2
AIP2=$AIP2
BOOT=$BOOT
SWAP=$SWAP
ROOT=$ROOT
KM='$KM'
CL='$CL'
LA_NG='$LA_NG'
USRPKGS='$USRPKGS'
WLIP2=$WLIP2
SSID=$SSID
PSK=$PSK
DOTSINSTALL=$DOTSINSTALL
EOF

  ln -sf /run/systemd/resolve/stub-resolv.conf $MNT_PNT/etc/resolv.conf &>/dev/null

  arch-chroot $MNT_PNT bash -c "
PW='$PW'
. ./rollarchrootparams
. ./rollarchroot
setup_all
"
}


function rollarch_bye() {
  echo "Arch Linux was installed successfully."
  echo "  boot: $BOOT"
  echo "  swap: $SWAP"
  echo "  root: $ROOT"
  roll_umount &>/dev/null
  echo -e "\033[0;32m
MANUALLY remove /rollarchrootparams /rollarchroot /Linstallis.

'poweroff', remove media, boot

cifs share and mount:

$ net usershare add cifs_share /home/$USR/path_to_cifs_share
$ mount -t cifs //196.168.$IP2/cifs_share cifs_share -o username=$USR,vers=2.0

nfs mount for computers in /etc/exports:

$ mount -t nfs 192.168.$IP2:/home/$USR/path_to_nfs_share nfs_share

Input method setup

$ ibus-setup

"
}


function rollarch_main() {
  if [[ $1 == "--help" ]] || [[ $1 == "-h" ]]; then
    rollarch_usage
    exit 0
  fi

  rollarch_check_internet
  [[ $? == 0 ]] || return 1

  #XXX pacman-key --refresh-keys

  rollarch_repos
  [[ $? == 0 ]] || return 1

  rollarch_check_defines
  [[ $? == 0 ]] || return 1
  rollarch_partition
  [[ $? == 0 ]] || return 1
  rollarch_packstrap "$@"
  [[ $? == 0 ]] || return 1
  rollarch_chroot
  [[ $? == 0 ]] || return 1
  rollarch_bye
}

#          for rollarchroot

function setup_arch_proxy() {
  if ! pacman -Qi darkhttpd; then
    pacman -S --needed --noconfirm darkhttpd
  fi
  ln -s /var/lib/pacman/sync/*.db /var/cache/pacman/pkg
  cd /usr/lib/systemd/system/
  cat darkhttpd.service | sed -e "s/Webserver/ArchProxy/g" -e "s,/srv/http.*$,/var/cache/pacman/pkg --no-server-id --port 8237,g" > ArchProxy.service
  systemctl enable ArchProxy
  ## check that all .sig files are there
  #cd /var/cache/pacman/pkg/
  #mir=https://mirrors.kernel.org/archlinux
  #for pkg in $(ls *.zst); do
  #  if ! ls $pkg.sig &> /dev/null ; then
  #    pkgname="$(echo $pkg | sed -e 's,\(.*\)-[0-9]*.[0-9]*.[0-9]*-.*,\1,')"
  #    repo="$(pacman -Si $pkgname | grep Repository | cut -d: -f2 | xargs)"
  #    sig="$mir/$repo/os/x86_64/$pkg.sig"
  #    if ! curl -OLs $sig ; then
  #        echo "Failed: $sig"
  #    fi
  #  fi
  #done
  cd /
}

function setup_time() {
  LOCALTIMECONF=${LOCALTIMECONF:-/etc/localtime}
  SYSTEMTIMECONF=${SYSTEMTIMECONF:-/etc/systemd/timesyncd.conf}
  for z in $(find /usr/share/zoneinfo/ -iname "*$ZONE"); do
    if [[ ! $z =~ ^.*/right/.*$ ]] && [[ ! $z =~ ^.*/posix/.*$ ]]; then
      rm -rf $LOCALTIMECONF
      ln -s "$z" $LOCALTIMECONF
      break
    fi
  done
  hwclock --systohc
  cat > $SYSTEMTIMECONF <<EOF
[Time]
NTP=0.arch.pool.ntp.org 1.arch.pool.ntp.org 2.arch.pool.ntp.org 3.arch.pool.ntp.org
FallbackNTP=0.pool.ntp.org 1.pool.ntp.org
RootDistanceMaxSec=5
PollIntervalMinSec=32
PollIntervalMaxSec=2048
EOF
  timedatectl set-ntp true
}

function setup_locale() {
  LOCALEGEN=${LOCALEGEN:-/etc/locale.gen}
  LOCALECONF=${LOCALECONF:-/etc/locale.conf}
  sed -i -r -e "s/#*(.*)/#\1/g" $LOCALEGEN
  local X=$LA_NG
  X+=" en_US"
  for x in $X
  do
    sed -i -r -e "s/^#+($x.* UTF-8)/\1/" $LOCALEGEN
  done
  locale-gen
  LC_ALL="en_US.UTF-8" locale > $LOCALECONF
}

function setup_keyboard() {
  VCONSOLECONF=${VCONSOLECONF:-/etc/vconsole.conf}
  KM=${KM:-us}
  CL=${CL:-99}
  local KBD=$(find /usr/share/kbd/keymaps/i386 -iname "$KM.map*")
  cd "${KBD%/*}"
  KBD=${KBD##*/}
  KBD=${KBD%%.*}
  cp $KBD.map.gz rollarch$KBD.map.gz
  #Win: 125 on VConsole, for X: `xmodmap -e "keysym Super_L = Caps_Lock"
  #Print: 99 on VConsole, for X: `xmodmap -e "keysym Print = Caps_Lock"
  gunzip rollarch$KBD.map.gz
  sed -i -e "s/keycode *58 *= *Caps_Lock/keycode 58 = Escape/g" rollarch$KBD.map
  echo "keycode $CL = Caps_Lock" >> rollarch$KBD.map
  echo "# modified: 58 = Escape and $CL = Caps_Lock" >> rollarch$KBD.map
  gzip rollarch$KBD.map
  cd /
  loadkeys rollarch$KBD
  # does not work in arch-chroot: localectl set-keymap rollarch$KBD
  if [[ ! -f "$VCONSOLECONF" ]]; then
    echo "KEYMAP=rollarch$KBD" > $VCONSOLECONF
  fi
}

function _nic_en_wl() {
  NIC_EN=""
  NIC_WL=""
  for NIC in $(ip link show | grep " UP \| DOWN \| DORMANT" | sed "s/^[^:]: \([^:]\+\).*/\1/g"); do
    if [[ ${NIC:0:1} == "e" ]] && ( [[ "$NIC_EN" == "" ]] || [[ "$(grep '' /sys/class/net/$NIC_EN/carrier)" == "0" ]] ); then
      NIC_EN=$NIC
    elif [[ ${NIC:0:1} == "w" ]] && [[ "$NIC_WL" == "" ]]; then
      NIC_WL=$NIC
    fi
    if [[ "$NIC_EN" != "" ]] && [[ "$NIC_WL" != "" ]]; then
      break
    fi
  done
}

function _nic_en_ip() {
  cat > $ETCSYSTEMDNETWORKWIRED <<EOF
[Match]
Name=$NIC_EN

[Network]
Address=$IP_CIDR_EN
Gateway=$IP_DNS
DNS=$IP_DNS
LLMNR=yes
MulticastDNS=yes
LinkLocalAddressing=no

[Route]
Metric=10
EOF
}

function _nic_wl_ip() {
  cat > $ETCSYSTEMDNETWORKWIRELESS <<EOF
[Match]
Name=$NIC_WL

[Network]
Address=$IP_CIDR_WL
Gateway=$IP_DNS
DNS=$IP_DNS
LLMNR=yes
MulticastDNS=yes
LinkLocalAddressing=no

[Route]
Metric=20
EOF
}

function _nic_en_dhcp() {
  cat > $ETCSYSTEMDNETWORKWIRED <<EOF
[Match]
Name=$NIC_EN

[Network]
DHCP=ipv4
LLMNR=yes
MulticastDNS=yes

[Route]
RouteMetric=10
EOF
}

function _nic_wl_dhcp() {
  cat > $ETCSYSTEMDNETWORKWIRELESS <<EOF
[Match]
Name=$NIC_WL

[Network]
DHCP=ipv4
LLMNR=yes
MulticastDNS=yes

[Route]
RouteMetric=20
EOF
}

##systemd-networkd needs wpa_supplicant to connect to access point
#wpa_cli>scan>scan_results
#>add_network 0
#>set_network 0 ssid <SSID>
#>set_network 0 psk <passphrase>
#>enable_network 0
#>save_config>quit
## repeat the wpa_passphrase line manually for other access points
function _nic_supplicant() {
  SUPPLICANT_CONF=${SUPPLICANT_CONF:-/etc/wpa_supplicant/wpa_supplicant-$NIC_WL.conf}
  cat > $SUPPLICANT_CONF <<EOF
ctrl_interface=/var/run/wpa_supplicant
update_config=1
eapol_version=1
fast_reauth=1
ap_scan=1
#network={
#    ssid="$SSID"
#    psk="$PSK"
#    }
EOF
  if [[ "$SSID" != "" ]] && [[ "$PSK" != "" ]]; then
    wpa_passphrase $SSID $PSK >> $SUPPLICANT_CONF
  fi
  systemctl enable wpa_supplicant@$NIC_WL
}

function _nic_bonding_ip() {
  cat > $ETCSYSTEMNETEORK_SBONDDEV <<EOF
[NetDev]
Name=sbond
Kind=bond
EOF
  cat > $ETCSYSTEMNETEORK_SBOND << EOF
[Match]
Name=sbond

[Network]
Address=$IP_CIDR_EN
Gateway=$IP_DNS
DNS=$IP_DNS
LLMNR=yes
MulticastDNS=yes
LinkLocalAddressing=no
EOF
  cat > $ETCSYSTEMDNETWORKWIRED <<EOF
[Match]
Name=$NIC_EN

[Network]
Bond=sbond
EOF
  cat > $ETCSYSTEMDNETWORKWIRELESS <<EOF
[Match]
Name=$NIC_WL

[Network]
Bond=sbond
EOF
}

function _nic_bonding_dhcp() {
  cat > $ETCSYSTEMNETEORK_DBONDDEV <<EOF
[NetDev]
Name=dbond
Kind=bond
EOF
  cat > $ETCSYSTEMNETEORK_DBOND << EOF
[Match]
Name=dbond

[Network]
DHCP=yes
LLMNR=yes
MulticastDNS=yes
LinkLocalAddressing=no
EOF
  cat > $ETCSYSTEMDNETWORKWIRED <<EOF
[Match]
Name=$NIC_EN

[Network]
Bond=dbond
EOF
  cat > $ETCSYSTEMDNETWORKWIRELESS <<EOF
[Match]
Name=$NIC_WL

[Network]
Bond=dbond
EOF
}

function _netctl_en() {
  mkdir -p ${ETCNETCTLSE%/*}
  cat > $ETCNETCTLSE <<EOF
Description='static ethernet'
Interface=$NIC_EN
Connection=ethernet
IP=static
Address=('$IP_CIDR_EN')
Gateway='$IP_DNS'
DNS=('$IP_DNS')
EOF
  mkdir -p ${ETCNETCTLDE%/*}
  cat > $ETCNETCTLDE <<EOF
Description='dhcp ethernet'
Interface=$NIC_EN
Connection=ethernet
IP=dhcp
EOF
}

function _netctl_wl() {
  mkdir -p ${ETCNETCTLSW%/*}
  cat > $ETCNETCTLSW <<EOF
Description='static wireless'
Interface=$NIC_WL
Connection=wireless
Security=wpa
ESSID='$SSID'
Key='$PSK'
IP=static
Address=('$IP_CIDR_EN')
Gateway='$IP_DNS'
DNS=('$IP_DNS')
EOF
  mkdir -p ${ETCNETCTLDW%/*}
  cat > $ETCNETCTLDW <<EOF
Description='dhcp wireless'
Interface=$NIC_WL
Connection=wireless
Security=wpa
IP=dhcp
ESSID='$SSID'
Key='$PSK'
EOF
}

function _netctl_bond() {
  mkdir -p ${ETCNETCTLSBOND%/*}
  cat > $ETCNETCTLSBOND <<EOF
Description='static bond'
Interface=sbond
Connection=bond
BindsToInterfaces=('$NIC_EN' '$NIC_WL')
IP=static
Address=('$IP_CIDR_EN')
Gateway='$IP_DNS'
DNS=('$IP_DNS')
EOF
  mkdir -p ${ETCNETCTLDBOND%/*}
  cat > $ETCNETCTLDBOND <<EOF
Description='dynamic bond'
Interface=dbond
Connection=bond
BindsToInterfaces=('$NIC_EN' '$NIC_WL')
IP=dhcp
EOF
}

# for VirtualBox use bridged to have access to LAN
# systemd-resolved instead of `echo "nameserver $IP_DNS" > /etc/resolv.conf`
# netctl is configured but not started
## FOR NETCTL
## #systemctl disable systemd-networkd
## #systemctl disable wpa_supplicant@$NIC_WL
## #systemctl --type=service #to ensure no other network service is running
## nectl start sbond/dbond #FOR EN AND WL
## #cat /proc/net/bonding/sbond # to check status # OR
## if [[ "$IP2" = "dhcp" ]]; then
##   netctl start dw #<wifi-menu-gnerated> # OR
##   netctl start de # ... FOR EN ONLY
## else
##   netctl start sw # see above # OR
##   netctl start se # ... FOR EN
## fi
function setup_ip() {
  ETCSYSTEMDNETWORKWIRED=${ETCSYSTEMDNETWORKWIRED:-/etc/systemd/network/20-wired.network}
  ETCSYSTEMDNETWORKWIRELESS=${ETCSYSTEMDNETWORKWIRELESS:-/etc/systemd/network/25-wireless.network}
  ETCSYSTEMDRESOLVEDCONF=${ETCSYSTEMDRESOLVEDCONF:-/etc/systemd/resolved.conf}
  ETCSYSTEMDFALLBACK=${ETCSYSTEMDFALLBACK:-/etc/systemd/network/99-dhcp.network}
  BONDINGMODULE=${BONDINGMODULE:-/etc/modules-load.d/bonding.conf}
  BONDINGCONF=${BONDINGCONF:-/etc/modprobe.d/bonding.conf}
  ETCSYSTEMNETEORK_SBONDDEV=${ETCSYSTEMNETEORK_SBONDDEV:-/etc/systemd/network/10-sbond.netdev}
  ETCSYSTEMNETEORK_SBOND=${ETCSYSTEMNETEORK_SBOND:-/etc/systemd/network/10-sbond.network}
  ETCSYSTEMNETEORK_DBONDDEV=${ETCSYSTEMNETEORK_DBONDDEV:-/etc/systemd/network/10-dbond.netdev}
  ETCSYSTEMNETEORK_DBOND=${ETCSYSTEMNETEORK_DBOND:-/etc/systemd/network/10-dbond.network}
  ETCNETCTLSE=${ETCNETCTLSE:-/etc/netctl/se}
  ETCNETCTLDE=${ETCNETCTLDE:-/etc/netctl/de}
  ETCNETCTLSW=${ETCNETCTLSW:-/etc/netctl/sw}
  ETCNETCTLDW=${ETCNETCTLDW:-/etc/netctl/dw}
  ETCNETCTLSBOND=${ETCNETCTLSBOND:-/etc/netctl/sbond}
  ETCNETCTLDBOND=${ETCNETCTLDBOND:-/etc/netctl/dbond}
  rm -rf /etc/systemd/network
  mkdir /etc/systemd/network
  _nic_en_wl
  if [[ "$IP2" != "dhcp" ]]; then
    local IP_2=${IP2##*.}
    local IP_1=${IP2%$IP_2}
    IP_DNS=192.168.${IP_1}1
    IP_CIDR_EN="192.168.$IP2/24"
    if [[ -n $WLIP2 ]]; then
      IP_CIDR_WL="192.168.$WLIP2/24"
      _nic_en_ip
      _nic_wl_ip
    else
      IP_CIDR_WL=$IP_CIDR_EN
      if [[ "$NIC_EN" != "" ]] && [[ "$NIC_WL" != "" ]]; then
        _nic_bonding_ip
      elif [[ "$NIC_EN" != "" ]]; then
        _nic_en_ip
      elif [[ "$NIC_WL" != "" ]]; then
        _nic_wl_ip
      fi
    fi
  else
    IP_DNS=$(ip route show default | sed -n -e "s/default via \([0-9.]*\).*/\1/p")
    if [[ "$NIC_EN" != "" ]] && [[ "$NIC_WL" != "" ]]; then
      _nic_bonding_dhcp
    elif [[ "$NIC_EN" != "" ]]; then
      _nic_en_dhcp
    elif [[ "$NIC_WL" != "" ]]; then
      _nic_wl_dhcp
    fi
  fi
  cat > $ETCSYSTEMDFALLBACK <<EOF
[Match]
Name=${NIC_WL:-$NIC_EN}
[Network]
DHCP=yes
EOF
  netctl stop-all
  if [[ "$NIC_EN" != "" ]] && [[ "$NIC_WL" != "" ]]; then
    cat > $BONDINGMODULE <<EOF
bonding
EOF
    # https://kerlilow.me/blog/setting-up-systemd-networkd-with-bonding/
    # not necessary for systemd-networkd according % but for netctl yes
    cat > $BONDINGCONF <<EOF
options bonding mode=active-backup miimon=100 primary=$NIC_EN max_bonds=0
EOF
  _netctl_bond
  fi
  [[ -n $NIC_EN ]] && _netctl_en
  [[ -n $NIC_WL ]] && _netctl_wl
  sed -i -e "s/#DNS=.*$/DNS=$IP_DNS/g" -e "s/#FallbackDNS/FallbackDNS/g" -e "s/#LLMNR/LLMNR/g" -e "s/#Multi/Multi/g" $ETCSYSTEMDRESOLVEDCONF
  [[ "$NIC_WL" != "" ]] && _nic_supplicant
  systemctl enable systemd-networkd
  systemctl enable systemd-resolved
  #systemctl enable avahi-daemon
}

# samba: add user share:
# net usershare add cifs_share /home/$USR/path_to_cifs_share
# nfs: edit /etc/exports
function setup_smb_ssh_nfs() {
  ETCSAMBASMB=${ETCSAMBASMB:-/etc/samba/smb.conf}
  VARLIBSAMBAUSERSHARES=${VARLIBSAMBAUSERSHARES:-/var/lib/samba/usershares}
  LOADMODULECIFS=${LOADMODULECIFS:-/etc/modules-load.d/cifs.conf}
  echo "cifs" > $LOADMODULECIFS
  cat > $ETCSAMBASMB <<EOF
[global]
   usershare path = /var/lib/samba/usershares
   usershare max shares = 100
   usershare allow guests = yes
   usershare owner only = yes

EOF
  curl -Ls https://raw.githubusercontent.com/samba-team/samba/master/examples/smb.conf.default | sed \
    -e "s,log file = .*$,logging = systemd,g" -e "s,MYGROUP,WORKGROUP,g" -e "s/\[global\]//g" >> $ETCSAMBASMB
  mkdir -p $VARLIBSAMBAUSERSHARES
  groupadd -rf sambashare
  chown root:sambashare $VARLIBSAMBAUSERSHARES
  chmod 1770 $VARLIBSAMBAUSERSHARES
  systemctl enable smb nmb
  ssh-keygen -q -t rsa -N '' <<< $'\ny' >/dev/null 2>&1
  ssh-keygen -q -t ed25519 -N '' <<< $'\ny' >/dev/null 2>&1
  systemctl enable sshd
  systemctl enable nfs-server.service
}

#IP2=1.107 WLIP2=1.117 SSID="YOURSSID" PSK="YOURPASSPHRASE"
function setup_network() {
  ETCHOSTS=${ETCHOSTS:-/etc/hosts}
  ETCHOSTNAME=${ETCHOSTNAME:-/etc/hostname}
  echo $HST > $ETCHOSTNAME
  cat > $ETCHOSTS <<EOF
127.0.0.1     localhost
::1           localhost
127.0.0.1     $HST.localdomain  $HST
EOF
  setup_ip
  setup_smb_ssh_nfs
}

function setup_boot() {
  EFI=${EFI:-$(test -e /sys/firmware/efi && echo on || echo off)}
  LOADERENTRY=${LOADERENTRY:-/boot/loader/entries/arch.conf}
  ROOT=${ROOT:-$(fdisk /dev/sda -l | grep "Linux filesystem" | cut -d " " -f 1)}
  #microcode used by systemd-boot as well as grub (automatically)
  UCODE=''
  if [[ "$(cat /proc/cpuinfo | grep GenuineIntel)" != "" ]]; then
    UCODE='intel-ucode'
  elif [[ "$(cat /proc/cpuinfo | grep AuthenticAMD)" != "" ]]; then
    UCODE='amd-ucode'
  fi
  if [[ "$UCODE" != "" ]]; then
    UCODE_STRING="initrd  /${UCODE}.img
"
    pacman -S --needed --noconfirm $UCODE
  fi
  if [[ "$EFI" == "on" ]]; then
    HOOKS='base systemd autodetect modconf block lvm2 filesystems keyboard sd-vconsole fsck'
    pacman -S --needed --noconfirm efibootmgr efitools
    UUID="$(blkid -s UUID -o value $ROOT)"
    APPEND="options root=UUID=${UUID} rw quiet splash loglevel=0 console=tty2"
    LOADERENTRYDIR=${LOADERENTRY%/*}
    mkdir -p $LOADERENTRYDIR
    echo "title   arch
linux   /vmlinuz-linux
${UCODE_STRING}initrd  /initramfs-linux.img
${APPEND}" > $LOADERENTRY
    echo "title   fallback arch
linux   /vmlinuz-linux
${UCODE_STRING}initrd  /initramfs-linux-fallback.img
${APPEND}" > ${LOADERENTRY/arch/fallback}
    cat > ${LOADERENTRYDIR%/*}/loader.conf <<EOF
timeout 1
default arch
EOF
    bootctl install
  else
    HOOKS='base udev autodetect modconf block lvm2 resume filesystems keyboard fsck'
    grub-install --target=i386-pc --recheck $DSK
    grub-mkconfig -o "/boot/grub/grub.cfg"
  fi
  sed -i -e "s/^HOOKS=.*/HOOKS=($HOOKS)/g" /etc/mkinitcpio.conf
  mkinitcpio -p linux
}

function setup_user() {
  groupadd -rf sambashare
  groupadd -rf plugdev
  groupadd -rf docker
  useradd -m -g users -G wheel,uucp,storage,power,video,audio,lp,games,scanner,plugdev,lock,sambashare,docker -s /usr/bin/bash $USR
  echo -e "$PW
$PW" | passwd
  echo -e "$PW
$PW" | passwd $USR
  echo -e "$PW
$PW" | smbpasswd -a $USR
  cat >> /etc/sudoers << EOF

%wheel ALL=(ALL:ALL) ALL
$USR ALL=(ALL:ALL) NOPASSWD:ALL
EOF
  if [[ -e /usr/bin/zsh ]]; then
    chsh -s /usr/bin/zsh $USR
  fi
}

function setup_dots() {
  mv /etc/security/pam_env.conf /etc/security/pam_env.conf.org
  cat > /etc/security/pam_env.conf << EOF
HOME                  DEFAULT="/home/@{PAM_USER}" DEFAULT="@{HOME}"
XDG_CACHE_HOME        DEFAULT="${HOME}/.local/var/cache"
XDG_CONFIG_HOME       DEFAULT="${HOME}/.local/etc"
XDG_DATA_HOME         DEFAULT="${HOME}/.local/share"
XDG_DATA_DIRS         DEFAULT="/usr/local/share:/usr/share" OVERRIDE="${XDG_DATA_DIRS}"
XDG_DATA_DIRS         DEFAULT="${XDG_DATA_HOME}:${XDG_DATA_DIRS}"
# Non-standard
XDG_LOG_HOME          DEFAULT="${HOME}/.local/var/log"
XDG_STATE_HOME        DEFAULT="${HOME}/.local/var/lib"
XDG_LIB_HOME          DEFAULT="${HOME}/.local/lib"
XDG_BIN_HOME          DEFAULT="${HOME}/.local/bin"
LD_LIBRARY_PATH       DEFAULT="${XDG_LIB_HOME}"
# ibus -> fcitx (to switch to fcitx)
GTK_IM_MODULE=ibus
QT_IM_MODULE=ibus
XMODIFIERS=@im=ibus
# fix various applications to respect XDG
# https://wiki.archlinux.org/index.php/XDG_Base_Directory
MYVIMRC               DEFAULT="${XDG_CONFIG_HOME}/vim/vimrc"
VIMINIT               DEFAULT="let \$MYVIMRC='${MYVIMRC}' | source \$MYVIMRC"
ZDOTDIR               DEFAULT="${XDG_CONFIG_HOME}/zsh"
LESSHISTFILE          DEFAULT="-"
GNUPGHOME             DEFAULT="${HOME}/.gnupg"
PGPPATH               DEFAULT="${GNUPGHOME}"
SSH_AGENT_PID         DEFAULT=
SSH_AUTH_SOCK         DEFAULT="${XDG_RUNTIME_DIR}/gnupg/S.gpg-agent.ssh"
GPG_AGENT_SOCK        DEFAULT="${XDG_RUNTIME_DIR}/gnupg/S.gpg-agent"
XAUTHORITY            DEFAULT="${XDG_RUNTIME_DIR}/Xauthority"
XINITRC               DEFAULT="${XDG_CONFIG_HOME}/X11/xinitrc"
XMODMAP               DEFAULT="${XDG_CONFIG_HOME}/X11/.Xmodmap"
RANDFILE              DEFAULT="${XDG_CACHE_HOME}/rnd"
SQLITE_HISTORY        DEFAULT="${XDG_STATE_HOME}/sqlite_history"
WINEPREFIX            DEFAULT="${XDG_STATE_HOME}/wine/default"
TMUX_TMPDIR           DEFAULT="${XDG_RUNTIME_DIR}"
RXVT_SOCKET           DEFAULT="${XDG_RUNTIME_DIR}/urxvtd.sock"
EOF
  if [[ -e $DOTSINSTALL ]]; then
    cd "/home/$USR"
    sudo -H -u $USR bash $DOTSINSTALL
  fi
}

#make dependencies of meta packages explicit
function setup_clean_meta() {
  if [[ -n $USRPKGS ]]; then
    for m in $USRPKGS; do
      if [[ "$m" =~ .*-meta ]]; then
        pacman -D $(LANG=C pacman -Si $m |sed -n '/Depends\ On/,/:/p'|sed '$d'|cut -d: -f2 |tr -d '>=[0-9]') --asexplicit
        pacman -R --noconfirm $m
      fi
    done
  fi
}

function setup_qemu() {
  cat > /etc/qemu-ifup << 'EOF'
#!/bin/sh
echo "Executing /etc/qemu-ifup"
echo "Bringing up $1 for bridged mode..."
sudo /usr/bin/ip link set $1 up promisc on
echo "Adding $1 to br0..."
sudo /usr/bin/brctl addif br0 $1
sleep 2
EOF
  cat > /etc/qemu-ifdown << 'EOF'
#!/bin/sh
echo "Executing /etc/qemu-ifdown"
sudo /usr/bin/ip link set $1 down
sudo /usr/bin/brctl delif br0 $1
sudo /usr/bin/ip link delete dev $1
EOF
  chown root:kvm /etc/qemu-ifup
  chown root:kvm /etc/qemu-ifdown
  chmod 750 /etc/qemu-ifup
  chown 750 /etc/qemu-ifdown
  echo "allow br0" >> /etc/qemu/bridge.conf
  echo "net.ipv4.ip_forward=1" > /etc/sysctl.d/99-sysctl.conf
  cat > /etc/sysctl.d/10-disable-firewall-on-bridge.conf << 'EOF'
net.bridge.bridge-nf-call-ip6tables = 0
net.bridge.bridge-nf-call-iptables = 0
net.bridge.bridge-nf-call-arptables = 0
EOF
  echo "tun" > /etc/modules-load.d/tun.conf
  cat >> /etc/sudoers << 'EOF'
Cmnd_Alias      QEMU=/usr/bin/ip,/usr/bin/modprobe,/usr/bin/brctl
%kvm     ALL=NOPASSWD: QEMU
EOF
}

function setup_all() {
  setup_time
  setup_locale
  setup_keyboard
  setup_network
  setup_boot

  if [[ -z "$PW" ]]; then
    read -s -p "Passport:" PW
    echo
    read -s -p "Repeat passport:" PW1
    echo
  fi
  if [[ -n "$PW" ]]; then
    setup_user
  fi

  if [[ $AIP2 == "yes" ]]; then
    setup_arch_proxy
  fi

  setup_dots
  setup_clean_meta

  # printing
  if pacman -Qi cups; then
    systemctl enable cups
  fi

  if [[ -z $(grep -q "^flags.*\ hypervisor\ " /proc/cpuinfo) ]]; then
    # we are in a VM
    :
    # for virtualbox:
    #   systemctl enable vboxservice
    #   VBoxClient-all
  else
    if pacman -Qi qemu-base; then
      setup_qemu
    fi
  fi
}


if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  if [[ "${0}" == "./rollarchroot" ]]; then
    if [[ $1 == "--help" ]] || [[ $1 == "-h" ]]; then
      rollarchrootusage
    fi
    for req in DSK USR PW HST ZONE IP2 AIP2 BOOT SWAP ROOT KM
    do
      if [[ "${!req}" == "" ]]; then
        echo "${req} missing!" >&2
        exit 1
      fi
    done
    setup_all
    exit 0
  fi
  rollarch_main "$@"
  if [[ $? -gt 0 ]]; then
    exit 1
  fi
  exit 0
fi
