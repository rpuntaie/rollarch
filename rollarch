#!/usr/bin/env bash

# manual tests to perform on virtualbox: sed -n -e "s/^.*testX: //p" rollarch | bash
# test1: DSK=/dev/sda USR=u PW=p HST=u121 IP2=1.121 AIP2=1.108 ZONE=Vienna ./rollarch
# test2: DSK=/dev/sda USR=u PW=p HST=u121 IP2=1.121 AIP2=1.108 KM=us CL=99 LA_NG="de_DE es_ES fr_FR it_IT ru_RU" ZONE=Vienna ./rollarch mdaffin-meta yay
# test3: DSK=/dev/sda USR=u PW=p HST=u121 IP2=1.121 AIP2=1.108 KM=us CL=99 LA_NG="de_DE es_ES fr_FR it_IT ru_RU" ZONE=Vienna DOTS=fjVcp ./rollarch
# test4: DSK=/dev/sda LVM=/dev/sdb USR=u PW=p HST=u121 IP2=1.121 AIP2=1.108 ZONE=Vienna ./rollarch

ROLLARCH_VERSION='0.0.1'

function rollarch_usage() 
{
  echo "${0##*/} v${ROLLARCH_VERSION}"
  echo
  echo "This file is from:"
  echo "  https://raw.githubusercontent.com/rpuntaie/rollarch/master/rollarch"
  echo "  https://git.io/installarch"
  echo
  echo "See:"
  echo "https://github.com/rpuntaie/rollarch/rollarch"
  echo
  echo "Call as root to install Arch Linux:"
  echo "  curl -OLs https://git.io/installarch #inspect, modify, ..."
  echo "  DSK=/dev/sda USR=A PW=B HST=C IP2=1.106 ZONE=Berlin bash installarch"
  echo
  echo "All parameters following 'installarch' are Arch or custom packages."
  echo "Default: base base-devel devtools dialog wpa_supplicant ntp nfs-utils samba sudo git python vim"
  echo
  echo "If the custom repo's name is 'custom',"
  echo "'AIP2=x.y' for 192.168.x.y is the only additional parameter needed.".
  echo "'AIP2=yes' sets up an ArchProxy server instead of using one."
  echo
  echo "Required: values are exampes"
  echo "# DSK=/dev/sda"
  echo "# USR=u"
  echo "# PW=p"
  echo "# HST=u121"
  echo "# ZONE=Vienna"
  echo
  echo "Optional:"
  echo "  SWAP [on|off] (on), set to 'off' e.g. for SSD and if you don't need swap"
  echo "  LVM [e.g. /dev/sdb], disks additional to $ROOT to form new LVM $ROOT /dev/vg0/lv0"
  echo "  IP2 [e.g. 1.106] for 192.168.1.106, else 'dhcp'"
  echo "  LA_NG in addition to en_US [e.g. de_DE] (none)"
  echo "  AIP2 [e.g. 1.199 | yes, to create Arch Proxy] (none)"
  echo "  KM: (US) one of 'localectl list-keymaps'."
  echo "      If in upper case: ESCAPE->CAPS_LOCK and CAPS_LOCK->WIN"
  echo "  DOTS: URL or https://git.io/SHORT to a bash installation script for dot files"
  echo "  WLIP2: for static IP2 and separate wl NIC, else bonding en+wl with IP2; not for netctl"
  echo "  SSID: wlan access point, if any"
  echo "  PSK: passphrase for wlan, if any"
  echo
  echo "Desription:"
  echo "  - check parameters and access to internet"
  echo "  - create and mount partitions"
  echo "  - check 'custom' at 192.168.$AIP2"
  echo "  - pacstrap"
  echo "  - arch-chroot using rollarchroot script"
  echo
}

function rollarch_check_internet()
{
  ping -c 1 -W 1 8.8.8.8 &>/dev/null
  if [[ $? != 0 ]]; then
    echo 'Fatal: Internet not available. Fix first.' >&2
    return 1
  fi

  if [[ "$(which ntpdate &> /dev/null)" != "" ]]; then
    ntpdate pool.ntp.org &>/dev/null
    timedatectl set-local-rtc 1 &>/dev/null
  fi
}


if [[ "$AIP2" == "" ]]; then
  AIP2="no"
elif [[ ! "$AIP2" =~ ^([0-9]+[.][0-9]+)$ ]] && [[ "$AIP2" != "no" ]]; then
  AIP2="yes"
fi
if [[ "$SWAP" != "off" ]]; then
  SWAP="on"
fi
if [[ "$KM" == "" ]]; then
  KM="US"
fi
if [[ -e /sys/firmware/efi ]]; then
  UEFI="on"
else
  UEFI="off"
fi
if [[ ! "$IP2" =~ ^([0-9]+[.][0-9]+)$ ]]; then
  IP2="dhcp"
fi

function rollarch_check_defines()
{
  if [[ -z $PW ]]; then
    read -s -p "Passport:" PW
    echo
    read -s -p "Repeat passport:" PW1
    echo
    if [[ "$PW1" != "$PW" ]]; then
      echo "PWs don't fit" >&2
      return 1
    fi
  fi
  for req in DSK USR PW HST ZONE
  do
    if [[ "${!req}" == "" ]]; then
      echo "Fatal: ${req} missing!" >&2
      return 1
    fi
  done

  if [[ ! -e $DSK ]]; then
    echo 'Fatal: DSK wrong' >&2
    return 1
  fi

  if [[ "$USR" == "root" ]] || [[ "$(echo $USR | sed -e 's/[a-z]//g')" != "" ]]; then
    echo 'Fatal: USR wrong' >&2
    return 1
  fi

  if [[ $(find /usr/share/zoneinfo -iname "*$ZONE" | wc -l) == 0 ]]; then
    echo 'Fatal: ZONE wrong' >&2
    return 1
  fi

  if [[ "$LA_NG" != "" ]]; then
    for la_ng in $LA_NG
    do
      if [[ "$la_ng" == "en_US" ]] || [[ ! "$la_ng" =~ ^([a-z][a-z]_[A-Z][A-Z])$ ]]; then
        echo 'additional LA_NG wrong' >&2
        return 1
      fi
    done
  fi

}

function roll_find_partitions()
{
  BOOT=$(fdisk -l $DSK | sed -ne "s/ *\*  .*//p")
  SWAP=$(fdisk -l $DSK | sed -ne "s/ [0-9\. GMT]* 82 .*//p")
  if [[ $SWAP == "" ]]; then
    SWAP=off
  fi
  ROOT=$(fdisk -l $DSK | sed -ne "s/ [0-9\. GMT]* 83 .*//p")
  if [[ "$ROOT" == "" ]]; then
    if [[ -e /dev/vg0/lv0 ]]; then
      ROOT=/dev/vg0/lv0
    fi
  fi
  if [[ "$ROOT" == "" ]]; then
    echo 'unable to find ROOT the partition' >&2
    return 1
  fi
  if [[ "$BOOT" == "" ]]; then
    echo 'unable to find BOOT the partition' >&2
    return 1
  fi
  echo "  boot: $BOOT"
  echo "  swap: $SWAP"
  echo "  root: $ROOT"
}

function roll_mkfs()
{
  if [[ "$SWAP" != "off" ]] && [[ "$SWAP" != "on" ]] && [[ "$SWAP" != "" ]];
  then
    yes y | mkswap $SWAP
    swapon $SWAP
  fi
  mkfs -t ext4 -F $ROOT
  yes y | tune2fs -U $(cat /proc/sys/kernel/random/uuid) $ROOT
  if [[ "$UEFI" == "off" ]]; then
    mkfs -t ext2 -F $BOOT
  else
    mkfs -t vfat $BOOT
  fi
}


function roll_mount()
{
  MNT_PNT=${MNT_PNT:-/mnt}
  mount $ROOT $MNT_PNT
  mkdir -p $MNT_PNT/boot
  mount $BOOT $MNT_PNT/boot
}


function rollarch_partition()
{
  if [[ "$LVM" != "" ]]; then
    umount /dev/vg0/lv0 &>/dev/null
    lvremove --yes vg0 lv0 &>/dev/null
    vgremove vg0 &>/dev/null
    for apv in $(pvscan -s | grep /dev/ | sed -ne "s/ //gp"); do
      pvremove $apv &>/dev/null
    done
  fi
  SWP=$(fdisk -l $DSK | sed -ne "s/ [0-9\. GMT]* 82 .*//p")
  swapoff $SWP &> /dev/null
  umount ${DSK}* &> /dev/null
  diskstart=2048s
  diskpart=
  dd if=/dev/zero of=$DSK bs=1 count=2048 &>/dev/null
  if [[ "$UEFI" == "off" ]]; then
    parted --script $DSK mklabel msdos
  else
    parted --script $DSK mklabel gpt
  fi
  parted --script --align optimal $DSK mkpart primary fat16 $diskstart 192MiB
  parted $DSK set 1 boot on
  diskstart=192MiB
  if [[ "$UEFI" == "off" ]]; then
    GRUB="grub"
  fi
  if [[ "$SWAP" == "off" ]]; then
    parted --script --align optimal $DSK mkpart primary ext4 $diskstart 100%
    swapsize=0
  else
    swapsize=$(cat /proc/meminfo | grep MemTotal | sed "s/[^:]*: *\(.*\) kB/\1000/g")
    ((swapsize=swapsize+2**30))
    swapsize=$(numfmt --to=si $swapsize)
    parted --script --align optimal $DSK mkpart primary linux-swap $diskstart $swapsize
    parted --script --align optimal $DSK mkpart primary ext4 $swapsize 100%
  fi
  roll_find_partitions
  [[ $?==0 ]] || return 1

  if [[ "$LVM" != "" ]]; then
    parted $DSK set ${ROOT#$DSK} lvm on &>/dev/null
    pvcreate $ROOT &>/dev/null
    for apv in $LVM; do
      dd if=/dev/zero of=$apv bs=1 count=2048 &>/dev/null
      parted --script --align optimal $apv mklabel msdos mkpart primary ext4 0% 100% &>/dev/null
      parted $apv set 1 lvm on &>/dev/null
      pvcreate ${apv}1 &>/dev/null
    done
    lvmpvs=$(pvdisplay | sed -ne "s/ *PV Name *//p")
    vgcreate vg0 $lvmpvs &>/dev/null
    lvcreate --yes -l 100%VG vg0 -n lv0 &>/dev/null
    ROOT=/dev/vg0/lv0
  fi
  roll_find_partitions
  roll_mkfs &>/dev/null
  roll_mount
}

#"key-ID: No" from https://wiki.archlinux.org/index.php/Unofficial_user_repositories
rollarch_additional_repo_names_possible="
[arcanisrepo]
Server = https://repo.arcanis.me/repo/\$arch
[dvzrv]
Server = https://pkgbuild.com/~dvzrv/repo/\$arch
[eschwartz]
Server = https://pkgbuild.com/~eschwartz/repo/\$arch
[herecura]
Server = https://repo.herecura.be/\$repo/\$arch
[quarry]
Server = https://pkgbuild.com/~anatolik/quarry/x86_64/
[blackeagle-pre-community]
Server = https://repo.herecura.be/\$repo/\$arch
[city]
Server = https://pkgbuild.com/~bgyorgy/\$repo/os/\$arch
[ffy00]
Server = https://pkgbuild.com/~ffy00/repo
[maximbaz]
Server = https://pkgbuild.com/~maximbaz/repo/
[seblu]
Server = https://al.seblu.net/\$repo/\$arch
[sergej-repo]
Server = http://www.p5n.pp.ru/\$repo/os/\$arch
[xyne-x86_64]
Server = https://xyne.archlinux.ca/repos/xyne
"

##repos tested in test_rollarch.bats
##here using py
#srvrs= {'arcanisrepo':'https://repo.arcanis.me/repo/x86_64',
#'dvzrv':'https://pkgbuild.com/~dvzrv/repo/x86_64',
#'eschwartz':'https://pkgbuild.com/~eschwartz/repo/x86_64',
#'herecura':'https://repo.herecura.be/herecura/x86_64',
#'quarry':'https://pkgbuild.com/~anatolik/quarry/x86_64/',
#'blackeagle-pre-community':'https://repo.herecura.be/blackeagle-pre-community/x86_64',
#'city':'https://pkgbuild.com/~bgyorgy/city/os/x86_64',
#'ffy00':'https://pkgbuild.com/~ffy00/repo',
#'maximbaz':'https://pkgbuild.com/~maximbaz/repo/',
#'seblu':'https://al.seblu.net/seblu/x86_64',
#'sergej-repo':'http://www.p5n.pp.ru/sergej-repo/os/x86_64',
#'xyne':'https://xyne.archlinux.ca/repos/xyne'}
#import urllib
#for nm,srv in srvrs.items():
#  assert b"pkg.tar.xz" in urllib.request.urlopen(srv).read(), nm+' failed'


function rollarch_repos()
{ #custom AIP2 and unofficial repo names from Unofficial_user_repositories to pacman.conf and mirrorlist
  PACMANCONF=${PACMANCONF:-/etc/pacman.conf}
  if [[ "$DOTS" != "" ]]; then
    DOTSINSTALL="$MNT_PNT/${DOTS##*/}"
    if [[ "$DOTS" =~ ^https:// ]] || [[ "$DOTS" =~ ^file:/// ]]; then
      curl -Ls $DOTS > $DOTSINSTALL
    elif [[ -f $DOTS ]]; then
      cp $DOTS $DOTSINSTALL
    else
      curl -Ls https://git.io/$DOTS > $DOTSINSTALL
    fi
    if [[ -f "$DOTSINSTALL" ]]; then
      USRPKGS=$(sed -n -e "s/^#PKG: *//p" $DOTSINSTALL)
      USRREPOS=$(sed -n -e "s/^#REPO: *//p" $DOTSINSTALL)
    fi
  fi

  ROLLARCH_MIRRORLIST=${ROLLARCH_MIRRORLIST:-/etc/pacman.d/mirrorlist}
  mv $ROLLARCH_MIRRORLIST $ROLLARCH_MIRRORLIST.org
  touch $ROLLARCH_MIRRORLIST
  if [[ "$AIP2" != "no" ]] && [[ "$AIP2" != "yes" ]]; then
    USRREPOS+=" http://192.168.$AIP2:8080"
  fi
  for arepo in $USRREPOS; do
    if [[ ! $arepo =~ ^http ]]; then #name from Unofficial_user_repositories
      #arepoconf=$(curl -Ls https://wiki.archlinux.org/index.php/Unofficial_user_repositories | sed -n -e "/<pre>\[$arepo\]/{N;s/<pre>//p}")
      arepoconf=$(echo "$rollarch_additional_repo_names_possible" | sed -n -e "/^\[$arepo\]/{N;p}")
      #no areposrv, because not wanted in mirrorlist
      #areposrv=${arepoconf/\[$arepo\]/}
      #areposrv=${areposrv//[[:space:]]/} #Server = https:...
    else
      areposrv="Server = $arepo"
      if [[ -n $(curl -s "$arepo" | grep "custom\.db") ]]; then
        arepoconf="[custom]
SigLevel = Optional TrustAll
$areposrv"
      fi
    fi
    if  [[ -n $areposrv ]] && ! $(head $ROLLARCH_MIRRORLIST.org | grep "$areposrv"); then
      echo "$areposrv" >> $ROLLARCH_MIRRORLIST
    fi
    if [[ -n $arepoconf ]] && ! $(tail $PACMANCONF | grep "$arepo"); then
         echo "$arepoconf" >> $PACMANCONF
    fi
  done
  cat $ROLLARCH_MIRRORLIST.org >> $ROLLARCH_MIRRORLIST
}


function rollarch_packstrap()
{
  PACMANCONF=${PACMANCONF:-/etc/pacman.conf}
  pacman -Sy

  if [[ "$@" != "" ]]; then
    USRPKGS="$USRPKGS $@"
    pacstrap $MNT_PNT $GRUB $USRPKGS
  else
    pacstrap $MNT_PNT $GRUB arch-install-scripts base base-devel devtools dialog wpa_supplicant ntp nfs-utils samba sudo git python vim zsh $USRPKGS
  fi

  mkdir -p $MNT_PNT/etc
  genfstab -t PARTUUID $MNT_PNT >> $MNT_PNT/etc/fstab
  cat $PACMANCONF | sed "s/#\(CheckSpace\)/\1/" > $MNT_PNT$PACMANCONF
}


#DSK=/dev/sda
#roll_find_partitions
#roll_mount
function rollarch_chroot()
{
  if [[ ! -f rollarchroot ]]; then
    curl -OLs https://raw.githubusercontent.com/rpuntaie/rollarch/master/rollarchroot
    chmod a+x ./rollarchroot
  fi
  cp ./rollarchroot $MNT_PNT

  if [[ ! -e $MNT_PNT/usr/bin/bash ]]; then
    echo 'Fatal: pacstrap failed.' >&2
    return 1
  fi

  arch-chroot $MNT_PNT bash -c "
DSK=$DSK
LVM=$LVM
USR=$USR
PW='$PW'
HST=$HST
ZONE=$ZONE
IP2=$IP2
AIP2=$AIP2
BOOT=$BOOT
SWAP=$SWAP
ROOT=$ROOT
UEFI=$UEFI
KM='$KM'
LA_NG='$LA_NG'
USRPKGS='$USRPKGS'
WLIP2=$WLIP2
SSID=$SSID
PSK=$PSK
DOTSINSTALL='/${DOTS##*/}'
. ./rollarchroot
setup_all
"

  ln -sf /run/systemd/resolve/stub-resolv.conf $MNT_PNT/etc/resolv.conf &>/dev/null
}


function roll_umount()
{
  umount $BOOT &>/dev/null
  umount $ROOT &>/dev/null
}


function rollarch_bye()
{
  roll_umount
  echo -e "\033[0;32m
Arch Linux was installed with
${USRPKGS:-rollarch defaults}.
'/rollarchroot' is still on $ROOT.

'poweroff', remove media, boot

cifs share and mount:

$ net usershare add cifs_share /home/$USR/path_to_cifs_share
$ mount -t cifs //196.168.$IP2/cifs_share cifs_share -o username=$USR,vers=2.0

nfs mount for computers in /etc/exports:

$ mount -t nfs 192.168.$IP2:/home/$USR/path_to_nfs_share nfs_share

"
}


function rollarch_main()
{
  if [[ $1 == "--help" ]] || [[ $1 == "-h" ]]; then
    rollarch_usage
    exit 0
  fi

  rollarch_check_internet
  [[ $? == 0 ]] || return 1
  rollarch_check_defines
  [[ $? == 0 ]] || return 1
  rollarch_partition
  [[ $? == 0 ]] || return 1
  rollarch_repos
  rollarch_packstrap "$@"
  rollarch_chroot
  [[ $? == 0 ]] || return 1
  rollarch_bye
}


if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    rollarch_main "$@"
    if [[ $? -gt 0 ]]; then
      exit 1
    fi
fi

