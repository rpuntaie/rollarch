#!/usr/bin/env bash

# See:
# https://github.com/rpuntaie/rollarch/rollarch
#
# This file::
#   https://raw.githubusercontent.com/rpuntaie/rollarch/master/rollarch
#   https://git.io/installarch
#
# Call as root to install Arch Linux::
#   curl -OLs https://git.io/installarch
#   DISK=/dev/sda USR=A PW=B PC=C IP2=1.106 ZONE=Berlin bash installarch
#
# Required: 
#   DISK [e.g. dev/sdX]
#   USR [not "root"]
#   PW [e.g. 's$92 37d sdxG?']
#   PC network name
#   ZONE [e.g. Vienna]
#
# Optional:
#   IP2 [e.g. 1.106] for 192.168.1.106, else "dhcp"
#   LA_NG in addition to en_US [e.g. de_DE] (none)
#   SWAP [on|off] (off) set to on for non-SSD
#
# Description:
# - 

# helpers

raise()
{
  echo "${1}" >&2
}

ping -c 1 -W 1 8.8.8.8 > /dev/null 2>&1
if [ $? != 0 ]
then
  raise 'Fatal: Internet not available. Fix first.'
  exit 1
fi

# update time else HTTPS won't work
if [ "$(which ntpdate 2> /dev/null)" != "" ]
then
  ntpdate pool.ntp.org > /dev/null 2>&1
  timedatectl set-local-rtc 1 > /dev/null 2>&1
fi

# check parameters

for req in DISK USR PW PC ZONE
do
  if [ "${!req}" = "" ]
  then
    raise "Fatal: ${req} missing!"
    exit 1
  fi
done

if [ ! -e $DISK ]
then
  raise 'Fatal: DISK wrong'
  exit 1
fi

if [ "$USR" = "root" ] || [ "$(echo $USR | sed -e 's/[a-z]//g')" != "" ]
then
  raise 'Fatal: USR wrong'
  exit 1
fi

if [ $(find /usr/share/zoneinfo -iname "*$ZONE" | wc -l) = 0 ]
then
  raise 'Fatal: ZONE wrong'
  exit 1
fi

if [[ ! "$IP2" =~ ^([0-9]+[.][0-9]+)$ ]]
then
  IP2="dhcp"
fi

if [ "$LA_NG" != "" ]
then
  if [ "$LA_NG" = "en_US" ] || [[ ! "$LA_NG" =~ ^([a-z][a-z]_[A-Z][A-Z])$ ]]
  then
    raise 'additional LA_NG wrong'
    exit 1
  fi
fi

if [ "$SWAP" != "on" ]
then
  SWAP="off"
fi

if [ -e /sys/firmware/efi ]; then
  UEFI="on"
else
  UEFI="off"
fi

#pacman -Sy
#pacman-db-upgrade
#pacman-key --init
#pacman-key --populate archlinux

# create partitions

umount ${DISK}* 2> /dev/null
diskstart=2048s
diskpart=
dd if=/dev/zero of=$DISK bs=1 count=2048 > /dev/null 2>&1
#dd if=/dev/zero of=$DISK bs=1 count=2048
if [ "$UEFI" = "off" ]; then
  parted --script $DISK mklabel msdos > /dev/null 2>&1
else
  parted --script $DISK mklabel gpt > /dev/null 2>&1
fi
parted --script --align optimal $DISK mkpart primary fat16 $diskstart 192MiB > /dev/null 2>&1
parted $DISK set 1 boot on > /dev/null 2>&1
diskstart=192MiB
if [ "$UEFI" = "off" ]; then
  GRUB="grub"
fi
if [ "$SWAP" = "off" ]; then
  parted --script --align optimal $DISK mkpart primary ext4 $diskstart 100% > /dev/null 2>&1
  swapsize=0
else
  swapsize=$(cat /proc/meminfo | grep MemTotal | sed "s/[^:]*: *\(.*\) kB/\1000/g")
  ((swapsize=swapsize+2**30))
  swapsize=$(numfmt --to=si $swapsize)
  parted --script --align optimal $DISK mkpart primary linux-swap $diskstart $swapsize > /dev/null 2>&1
  parted --script --align optimal $DISK mkpart primary ext4 $swapsize 100% > /dev/null 2>&1
fi
BOOT=
ROOT=
for diskpart in $(ls ${DISK}*); do
  if [[ "$diskpart" =~ ^([a-z/]+([0-9]n)?[0-9]p|[a-z/]+)[0-9]$ ]]; then
    if [ "$diskpart" != "$DISK" ]; then
      if [ "$BOOT" = "" ]; then
        BOOT=$diskpart
        echo "  boot: $BOOT"
      elif [ "$SWAP" = "off" ]; then
        ROOT=$diskpart
        echo "  root: $ROOT"
      elif [ "$SWAP" != "off" ]; then
        if  [ "$SWAP" = "on" ]; then
          SWAP=$diskpart
          echo "  swap: $SWAP"
        else
          ROOT=$diskpart
          echo "  root: $ROOT"
        fi
      fi
    fi
  fi
done
if [ "$ROOT" = "" ]; then
  raise 'unable to find the partition'
  exit 1
fi
if [ "$BOOT" != "" ]; then
  if [ "$UEFI" = "off" ]; then
    mkfs -t ext2 -F $BOOT
  else
    mkfs -t vfat $BOOT
  fi
fi
if [ "$SWAP" != "off" ]; then
  yes y | mkswap $SWAP
fi
mkfs -t ext4 -F $ROOT
yes y | tune2fs -U $(cat /proc/sys/kernel/random/uuid) $ROOT

#prepare chroot
mount $ROOT /mnt
if [ "$BOOT" != "" ]; then
  mkdir -p /mnt/boot
  mount $BOOT /mnt/boot
fi
pacstrap /mnt arch-install-scripts base gptfdisk sudo $GRUB

#create chroot script that uses "inchroot"

cat > /mnt/rollarchroot << EOF
#!/usr/bin/env bash

# This script was executed after arch-chroot
# at Arch Linux install with 
# https://github.com/rpuntaie/rollarch

export DISK=$DISK
export USR=$USR
export PW='$PW'
export PC=$PC
export LA_NG=$LA_NG
export ZONE=$ZONE
export IP2=$IP2
export BOOT=$BOOT
export SWAP=$SWAP
export ROOT=$ROOT
export UEFI=$UEFI

partid() {
  blkid -g
  for info in \$(blkid -o value "\$1"); do
    if [ "\$info" != "msdos" ]; then
      echo \$info
      return
    fi
  done
}
export -f partid

setup_time(){
  for z in \$(find /usr/share/zoneinfo/ -iname "*\$ZONE"); do
    if [[ ! \$z =~ ^.*/right/.*$ ]] && [[ ! \$z =~ ^.*/posix/.*$ ]]
    then
      rm -rf /etc/localtime
      ln -s "\$z" /etc/localtime
      break
    fi
  done
  hwclock --systohc
}
export -f setup_time

setup_locale(){
  if [ "\$LA_NG" != "" ]
  then
    cat /etc/locale.gen | grep -E "#\${LA_NG}.* UTF-8" | sed -r "s/^#(.*)/\1/" > /etc/locale.tmp
  fi
  echo 'en_US.UTF-8 UTF-8' >> /etc/locale.tmp
  mv /etc/locale.tmp /etc/locale.gen
  locale-gen
  locale > /etc/locale.conf
}
export -f setup_locale

setup_escape(){
  # change: keycode  58 = Escape
  local KBD=$(find /usr/share/kbd/keymaps/ -iname "us.map.gz")
  local olddir="\$(pwd)"
  cd "\$(dirname \$KBD)"
  KBD=\$(basename \$KBD)
  cp \$KBD rollarch\$KBD.map.gz
  gunzip rollarch\$KBD.map.gz
  sed -ie "s/keycode *58 *= *Caps_Lock/keycode 58 = Escape/g" rollarch\$KBD.map 
  gzip rollarch\$KBD.map
  cd "\$olddir"
  loadkeys rollarch\$KBD
  cat > /etc/vconsole.conf << END
KEYMAP=rollarch\$KBD
FONT=lat9w-16
FONT_MAP=8859-1_to_uni
END
}
export -f setup_escape

#for VirtualBox use bridged to make static netctl work
setup_network(){
  echo \$PC > /etc/hostname
  cat > /etc/hosts << END
127.0.0.1     localhost
::1           localhost
127.0.0.1     \$PC.localdomain  \$PC
END
  if [ "\$IP2" != "dhcp" ]; then
    #IP2="1.100"
    local IPE=\${IP2##*.} #100
    local IPB=\${IP2%\$IPE} #1.
    local NS=192.168.\${IPB}1
    local CIDR="192.168.\$IP2/24"
    echo "nameserver \$NS" > /etc/resolv.conf
  fi
  for NIC in \$(ip link show|grep " UP \| DOWN "|sed "s/^[^:]: \([^:]\+\).*/\1/g"); do
    if [ \${NIC:0:1} = "e" ]; then
      if [ "\$IP2" != "dhcp" ]; then
        cat > /etc/netctl/se << END
Description='static ethernet'
Interface=\$NIC
Connection=ethernet
IP=static
Address=('\$CIDR')
Gateway=('\$NS')
DNS=('\$NS')
END
        cat > /etc/systemd/system/network.service << END
[Unit]
Description=Network Connectivity
Wants=network.target
Before=network.target
BindTo=sys-subsystem-net-devices-\$NIC.device
After=sys-subsystem-net-devices-\$NIC.device

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/bin/ip link set dev \$NIC up
ExecStart=/usr/bin/ip addr add \$CIDR dev \$NIC
ExecStart=/usr/bin/ip route add default via \$NS
ExecStop=/usr/bin/ip addr flush dev \$NIC
ExecStop=/usr/bin/ip link set dev \$NIC down

[Install]
WantedBy=multi-user.target
END
      fi
      cat > /etc/netctl/de << END
Description='dhcp ethernet'
Interface=\$NIC
Connection=ethernet
IP=dhcp
END
    else
      if [ "\$IP2" != "dhcp" ]; then
        cat > /etc/netctl/sw << END
Description='static wireless'
Interface=\$NIC
Connection=wireless
Security=wpa
ESSID='TODO'
Key='TODO'
IP=static
Address=('\$CIDR')
Gateway=('\$NS')
DNS=('\$NS')
END
      fi
      cat > /etc/netctl/dw << END
Description='dhcp wireless'
Interface=\$NIC
Connection=wireless
Security=wpa
IP=dhcp
ESSID='TODO'
Key='TODO'
END
    fi
  done
  if [[ "\$IP2" = "dhcp" ]]; then
    netctl start d\${NIC:0:1}
    netctl enable d\${NIC:0:1} > /dev/null 2>&1
    #systemctl start dhcpcd
    #systemctl enable dhcpcd > /dev/null 2>&1
  else
    netctl start s\${NIC:0:1}
    netctl enable s\${NIC:0:1} > /dev/null 2>&1
    #systemctl start network
    #systemctl enable network > /dev/null 2>&1
  fi
}
export -f setup_network

setup_boot(){
  pacman -S --needed --noconfirm dialog wpa_supplicant iw > /dev/null 2>&1
  UCODE=''
  UCODE_STRING=''
  if [ "\$(cat /proc/cpuinfo | grep GenuineIntel)" != "" ]; then
    UCODE='intel-ucode'
  elif [ "\$(cat /proc/cpuinfo | grep AuthenticAMD)" != "" ]; then
    UCODE='amd-ucode'
  fi
  if [ "\$UCODE" != "" ]; then
    UCODE_STRING="initrd  /\${UCODE}.img
"
    pacman -S --needed --noconfirm \$UCODE > /dev/null 2>&1
  fi
  if [ "\$UEFI" = "on" ]; then
    pacman -S --needed --noconfirm efibootmgr efitools > /dev/null 2>&1
    bootctl --path=/boot install
    PARTUUID="\$(blkid -s PARTUUID -o value \$ROOT)"
    APPEND="options root=PARTUUID=\${PARTUUID} rw quiet splash loglevel=0 console=tty2"
    echo "title   \${PC}
linux   /vmlinuz-linux
\${UCODE_STRING}initrd  /initramfs-linux.img
\${APPEND}" > /boot/loader/entries/arch.conf
  else
    mkinitcpio -p linux
    grub-install --target=i386-pc --recheck \$DISK > /dev/null 2>&1
    grub-mkconfig -o "/boot/grub/grub.cfg" > /dev/null 2>&1
  fi
}
export -f setup_boot

setup_fstab(){
  if [ "\$SWAP" != "off" ]; then
    swapon \$SWAP
  fi
  genfstab -U -p / > /etc/fstab
  if [ "\$BOOT" != "" ]; then
    sed -ie "s#\$BOOT#UUID=\$(partid \$BOOT)#" /etc/fstab
  fi
  if [ "\$SWAP" != "off" ]; then
    sed -ie "s#\$SWAP#UUID=\$(partid \$SWAP)#" /etc/fstab
  fi
  sed -ie "s#\$ROOT#UUID=$(partid \$ROOT)#" /etc/fstab
  cat /etc/fstab | sed -r 's/^(# )?(\/etc|efivarfs).*//' > /etc/fstab.tmp
  mv /etc/fstab.tmp /etc/fstab
}
export -f setup_fstab

setup_user(){
  sed -i -e "s/^# *\(%wheel ALL=(ALL) ALL\)/\1/" /etc/sudoers
  echo -e "\$PW
\$PW" | passwd
  useradd -m -g users -G wheel,storage,power,video,audio,lp,games,scanner -s /bin/bash \$USR
  echo -e "\$PW
\$PW" | passwd \$USR
}
export -f setup_user

if [[ "\${BASH_SOURCE[0]}" == "\${0}" ]]
then
  setup_time
  setup_locale
  setup_escape
  setup_network
  setup_boot
  setup_fstab
  setup_user
  exit
fi

EOF

chmod a+x /mnt/rollarchroot

echo "arch-chroot into /mnt folder"
arch-chroot /mnt /rollarchroot
#rm -rf /mnt/rollarchroot
umount ${DISK}* 2> /dev/null
echo "
  Arch Linux is ready.

  Next

  - type 'poweroff'
  - remove the media afterwards
  - boot
  - delete '/rollarchroot' (contains password)
  - install further packages
"

