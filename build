#!/bin/bash

set -uo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

if ! command -v ccm64 >/dev/null 2>&1; then
  echo -e "ccm64 required. https://github.com/graysky2/clean-chroot-manager"
  exit 1
fi

LOCAL_PATH=/var/cache/pacman/pkg
REPO_NAME=custom

PACKAGES=${@:-pkg/*}

for package in $PACKAGES; do
    if [[ ! -f "$package/PKGBUILD" ]]; then
        echo -e "$package/PKGBUILD missing.
Make sure submodules are there:
    # first time
    git submodule update --init --recursive
    # then
    git pull --recurse-submodules
    git submodule update --remote --recursive
" >&2
        exit 1
    fi
done

get_pkg_arch() {
    while (( $# )); do
        if [[ "$1" == "x86_64" ]] || [[ "$1" == "any" ]]; then
            echo "$1"
            return
        fi
        shift
    done
}

ROLLARCH="$PWD"

#additional build tools
#XXX better would be to accept additional packages in ccm64
if [[ -z "$SUDO_USER" ]]; then
  if logname &>/dev/null; then
    USER=$(logname)
  fi
elif [[ "$SUDO_USER" = "root" ]]; then
  echo -e "Cannot determine your username. Exiting."
  exit 1
else
  USER="$SUDO_USER"
fi
HOMEDIR="$(getent passwd "$USER" | cut -d: -f6)"
# CHROOTPATH64="/scratch/.chroot64"
# comes from clean-chroot-manager.conf
if [[ -f "$HOMEDIR/.local/etc/clean-chroot-manager.conf" ]]; then
    source $HOMEDIR/.local/etc/clean-chroot-manager.conf
else
    source $HOMEDIR/.config/clean-chroot-manager.conf
fi
# in /etc/fstab add setting 10G
# tmpfs   /scratch/.chroot64    tmpfs   nodev,user,noauto,size=10G  0   0
if cat /etc/fstab | grep $CHROOTPATH64 &> /dev/null; then
  if ! mount | grep $CHROOTPATH64 &> /dev/null; then
    mount $CHROOTPATH64
  fi
fi
if [[ ! -d "$CHROOTPATH64/root" ]]; then
    ccm64 c &> rollarch.log
fi
if [[ -d "$CHROOTPATH64/root" ]]; then
    for tool in git unzip meson cmake clojure; do
        if [[ ! -x "$CHROOTPATH64/root/usr/bin/$tool" ]]; then
            pacstrap "$CHROOTPATH64/root" $tool
        fi
    done
fi

for package in $PACKAGES; do

    cd "$package"
    pkgdr="$(pwd)"

    dps="$(source PKGBUILD && echo "${makedepends[@]} ${depends[@]}")"
    for adep in $dps; do
        if [[ -d "$ROLLARCH/pkg/$adep" ]]; then
            echo "first doing dependency $adep"
            cd $ROLLARCH
            ./build "pkg/$adep"
            cd $pkgdr
        fi
    done

    echo "doing $pkgdr"
    psuffix="$(source PKGBUILD && echo "-$pkgver-$pkgrel-$(get_pkg_arch ${arch[@]}).pkg.tar.*")"
    pkgs=*$psuffix
    if ! ls *$psuffix 1> /dev/null 2>&1; then
        echo "$package..." && ccm64 s &> rollarch.log && echo "OK" || echo "FAIL"
    else
        echo *$psuffix
    fi
    for pkgfile in *$psuffix; do
        if [[ -f "$pkgfile" ]]; then
            cp $pkgfile $LOCAL_PATH
            repo-add "$LOCAL_PATH/$REPO_NAME.db.tar.zst" $LOCAL_PATH/$pkgfile
        fi
    done

    cd $ROLLARCH

done

ln -sf "$REPO_NAME.db.tar.zst" "$LOCAL_PATH/$REPO_NAME.db"
ln -sf "$REPO_NAME.files.tar.zst" "$LOCAL_PATH/$REPO_NAME.files"

